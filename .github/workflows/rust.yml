name: Rust

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

concurrency:
  group: rust-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Not needed in CI, should make things a bit faster
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  # Build smaller artifacts to avoid running out of space in CI and make it a bit faster
  RUSTFLAGS: -C strip=symbols
  # Needed for things like file system access
  MIRIFLAGS: -Zmiri-disable-isolation
  RUST_BACKTRACE: full

jobs:
  cargo-fmt:
    runs-on: ubuntu-24.04
    # Gives the slow cargo test jobs a head start
    needs: cargo-test-slow-head-start

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Configure cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
        # Cache on Windows is so slow, it is faster without it, see many reports like
        # https://github.com/actions/runner-images/issues/7320
        if: runner.os != 'Windows'

      - name: cargo fmt
        run: cargo fmt --all -- --check

  # Artificial job that gives windows test jobs head start by making other jobs start a bit later, so Windows jobs
  # schedule earlier than the rest and will not delay the rest of the queue as much as they would otherwise
  cargo-test-slow-head-start:
    runs-on: ubuntu-24.04
    steps:
      - name: Artificial delay
        run: sleep 5

  cargo-clippy:
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
          - macos-15
          - windows-11-arm
          - windows-2025
        type:
          - together
          - individually
          - features

    runs-on: ${{ matrix.os }}
    # Gives the slow cargo test jobs a head start
    needs: cargo-test-slow-head-start

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Configure cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
        # Cache on Windows is so slow, it is faster without it, see many reports like
        # https://github.com/actions/runner-images/issues/7320
        if: runner.os != 'Windows'

      - uses: rui314/setup-mold@725a8794d15fc7563f59595bd9556495c0564878 # v1
        if: runner.os == 'Linux' || runner.os == 'Windows'

      # Use Mold linker for shorter build times
      - name: Use Mold linker on Linux and Windows
        shell: bash
        run: |
          echo "RUSTFLAGS=${{ env.RUSTFLAGS }} -C link-arg=-fuse-ld=mold" >> $GITHUB_ENV
        if: runner.os == 'Linux' || runner.os == 'Windows'

      - name: cargo clippy
        run: |
          cargo -Zgitoxide -Zgit clippy --locked --all-targets -- -D warnings
        if: matrix.type == 'together'

      - name: cargo clippy (each crate individually)
        shell: bash
        run: |
          for crate_path in crates/{contracts/{core,example,system},execution,farmer,node,shared}/*; do
            if [ ! -f "$crate_path/Cargo.toml" ]; then
              continue
            fi
            crate="$(basename -- $crate_path)"
            echo "Checking \`$crate\` individually"
            cargo -Zgitoxide -Zgit clippy --all-targets --package $crate -- -D warnings
          done
        if: matrix.type == 'individually'

      - name: cargo clippy (various features)
        shell: bash
        run: |
          for feature in alloc parallel scale-codec serde; do
            echo "Check clippy with feature: $feature"
            for crate_path in crates/{execution,farmer,node,shared}/*; do
              # Not all crates have this feature
              if ! grep --no-messages --quiet "^$feature = \[" "$crate_path/Cargo.toml"; then
                continue
              fi
              crate="$(basename -- $crate_path)"
              echo "Checking \`$feature\` in \`$crate\`"
              cargo -Zgitoxide -Zgit clippy --all-targets --package $crate --features $crate/$feature -- -D warnings
            done
          done

          # Ensure `clippy` is happy with `guest` feature
          echo "Checking \`guest\` in contracts"
          for contract_path in crates/contracts/{example,system}/*; do
            contract="$(basename -- $contract_path)"
            echo "Checking \`guest\` in \`$contract\`"
            cargo -Zgitoxide -Zgit clippy --all-targets --package $contract --features $contract/guest -- -D warnings
          done
          for crate_path in crates/contracts/core/*; do
            # Not all crates have this feature
            if ! grep --no-messages --quiet "^guest = \[" "$crate_path/Cargo.toml"; then
              continue
            fi
            crate="$(basename -- $crate_path)"
            echo "Checking \`guest\` in \`$crate\`"
            cargo -Zgitoxide -Zgit clippy --all-targets --package $crate --features $crate/guest -- -D warnings
          done

          echo "Checking \`executor\` in \`ab-contracts-common\`"
          cargo -Zgitoxide -Zgit clippy --all-targets --package ab-contracts-common --features ab-contracts-common/executor -- -D warnings

          echo "Checking \`payload-builder\` in \`ab-system-contract-simple-wallet-base\`"
          cargo -Zgitoxide -Zgit clippy --all-targets --package ab-system-contract-simple-wallet-base --features ab-system-contract-simple-wallet-base/payload-builder -- -D warnings
        if: matrix.type == 'features'

  cargo-test:
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
          - macos-15
          - windows-11-arm
          - windows-2025
        miri:
          - true
          - false
        type:
          # `together` variant is running in a separate job, see `cargo-test-slow`
          # - together
          - features
          - guest-feature
        exclude:
          - os: macos-15
            type: guest-feature
          - os: windows-11-arm
            type: guest-feature
          - os: windows-2025
            type: guest-feature

    runs-on: ${{ matrix.os }}
    # Gives the slow cargo test jobs a head start
    needs: cargo-test-slow-head-start
    env:
      command: ${{ matrix.miri == true && 'miri nextest run' || 'nextest run' }}

    steps: &test-steps
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Configure cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
        # Cache on Windows is so slow, it is faster without it, see many reports like
        # https://github.com/actions/runner-images/issues/7320
        if: runner.os != 'Windows'

      - name: Install cargo-nextest
        uses: taiki-e/install-action@d12e869b89167df346dd0ff65da342d1fb1202fb # 2.53.2
        with:
          tool: cargo-nextest

      - uses: rui314/setup-mold@725a8794d15fc7563f59595bd9556495c0564878 # v1
        if: runner.os == 'Linux' || runner.os == 'Windows'

      # Use Mold linker for shorter build times
      - name: Use Mold linker on Linux and Windows
        shell: bash
        run: |
          echo "RUSTFLAGS=${{ env.RUSTFLAGS }} -C link-arg=-fuse-ld=mold" >> $GITHUB_ENV
        if: runner.os == 'Linux' || runner.os == 'Windows'

      # TODO: This is a workaround for https://github.com/RustCrypto/stream-ciphers/issues/426
      - name: Miri aarch64 workaround
        shell: bash
        run: |
          echo "RUSTFLAGS=${{ env.RUSTFLAGS }} --cfg chacha20_force_soft" >> $GITHUB_ENV
        if: matrix.miri == true && runner.arch == 'ARM64'

      - name: Install Vulkan runtime (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends --yes mesa-vulkan-drivers
        if: matrix.miri == false && runner.os == 'Linux' && matrix.type == 'together'

      - name: Install Vulkan runtime (Windows)
        run: |
          & {
            # See https://vulkan.lunarg.com/sdk/home for updates
            $sdkVersion = "1.4.328.1"
            if ("${{ runner.arch }}" -eq "ARM64") {
              $arch = "ARM64"
              $urlPath = "warm"
              $expectedHash = "1f675a1b317a32d451ebf45d77483889d85a5fa972bd01dd1c1ee173278c63c9"
            } else {
              $arch = "X64"
              $urlPath = "windows"
              $expectedHash = "293efbb2c11e60429df7770f40e3c5c811a7fa42af81de0cc41e8718ddb2b373"
            }

            $url = "https://sdk.lunarg.com/sdk/download/$sdkVersion/$urlPath/VulkanRT-$arch-$sdkVersion-Components.zip"
            Invoke-WebRequest -Uri $url -OutFile VulkanRT.zip

            $actualHash = (Get-FileHash VulkanRT.zip -Algorithm SHA256).Hash.ToLower()
            if ($actualHash -ne $expectedHash.ToLower()) {
              throw "SHA256 mismatch: expected $expectedHash, got $actualHash"
            }

            7z e VulkanRT.zip -o"${{ runner.temp }}\vulkan" -r "vulkan-1.*"
            Remove-Item VulkanRT.zip

            $vulkanPath = "${{ runner.temp }}\vulkan"
            "$vulkanPath" >> $env:GITHUB_PATH
          }

          & {
            # See https://github.com/mmozeiko/build-mesa/releases for updates
            $version = "25.2.5"
            if ("${{ runner.arch }}" -eq "ARM64") {
              $arch = "arm64"
              $archJson = "aarch64"
              $expectedHash = "94f19af7f14988ba7f292f258690b2c0f2e9aa84943e7d2d06a80308e054002b"
            } else {
              $arch = "x64"
              $archJson = "x86_64"
              $expectedHash = "4a88e27ea1ec6fa02d52873fe9ed95566dc7766540cb9f76d310b896c7b0060a"
            }

            $url = "https://github.com/mmozeiko/build-mesa/releases/download/$version/mesa-lavapipe-$arch-$version.7z"
            Invoke-WebRequest -Uri $url -OutFile mesa-lavapipe.7z

            $actualHash = (Get-FileHash mesa-lavapipe.7z -Algorithm SHA256).Hash.ToLower()
            if ($actualHash -ne $expectedHash.ToLower()) {
              throw "SHA256 mismatch: expected $expectedHash, got $actualHash"
            }

            7z x mesa-lavapipe.7z -o"${{ runner.temp }}\mesa"
            Remove-Item mesa-lavapipe.7z

            $mesaPath = "${{ runner.temp }}\mesa"
            "$mesaPath" >> $env:GITHUB_PATH

            $icdPath = "$mesaPath\lvp_icd.$archJson.json"
            New-Item -Path "HKLM:\SOFTWARE\Khronos\Vulkan\Drivers" -Force| Out-Null
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Khronos\Vulkan\Drivers" -Name $icdPath -Value 0 -Type DWord
          }
        if: matrix.miri == false && runner.os == 'Windows' && matrix.type == 'together'

      - name: cargo ${{ env.command }}
        run: |
          cargo -Zgitoxide -Zgit ${{ env.command }} --locked ${{ env.EXTRA_OPTIONS }}
        if: matrix.type == 'together'

      - name: cargo test (various features)
        shell: bash
        run: |
          for feature in alloc parallel scale-codec serde; do
            for crate_path in crates/{execution,farmer,node,shared}/*; do
              # Not all crates have this feature
              if ! grep --no-messages --quiet "^$feature = \[" "$crate_path/Cargo.toml"; then
                continue
              fi
              crate="$(basename -- $crate_path)"
              echo "Testing \`$feature\` in \`$crate\`"
              cargo -Zgitoxide -Zgit ${{ env.command }} --no-tests pass --package $crate --features $crate/$feature
            done
          done

          echo "Checking \`executor\` in \`ab-contracts-common\`"
          cargo -Zgitoxide -Zgit ${{ env.command }} --package ab-contracts-common --features ab-contracts-common/executor

          echo "Testing \`payload-builder\` in \`ab-system-contract-simple-wallet-base\`"
          cargo -Zgitoxide -Zgit ${{ env.command }} --package ab-system-contract-simple-wallet-base --features ab-system-contract-simple-wallet-base/payload-builder
        if: matrix.type == 'features'

      - name: cargo ${{ env.command }} (guest feature)
        shell: bash
        run: |
          # Ensure tests pass with `guest` feature
          for contract_path in crates/contracts/{example,system}/*; do
            contract="$(basename -- $contract_path)"
            echo "Testing \`guest\` in \`$contract\`"
            cargo -Zgitoxide -Zgit ${{ env.command }} --no-tests pass --package $contract --features $contract/guest
          done
          for create_path in crates/contracts/core/*; do
            # Not all crates have this feature
            if ! grep --no-messages --quiet "^guest = \[" "$crate_path/Cargo.toml"; then
              continue
            fi
            crate="$(basename -- $create_path)"
            echo "Testing \`guest\` in \`$crate\`"
            cargo -Zgitoxide -Zgit ${{ env.command }} --no-tests pass --package $crate --features $crate/guest
          done
        if: matrix.type == 'guest-feature' && runner.os == 'Linux'

  # This is a hack to start slower jobs before the rest, see `cargo-test` job for full definition
  cargo-test-slow:
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
          - macos-15
          - windows-11-arm
          - windows-2025
        miri:
          - true
          - false
        type:
          - together
          # - features
          # - guest-feature
        exclude:
          - os: macos-15
            type: guest-feature
          - os: windows-11-arm
            type: guest-feature
          - os: windows-2025
            type: guest-feature

    runs-on: ${{ matrix.os }}
    env:
      command: ${{ matrix.miri == true && 'miri nextest run' || 'nextest run' }}

    steps: *test-steps

  no-panic:
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
          - macos-15
          - windows-11-arm
          - windows-2025
        type:
          - default
          - features
          - guest-feature
        exclude:
          - os: macos-15
            type: guest-feature
          - os: windows-11-arm
            type: guest-feature
          - os: windows-2025
            type: guest-feature

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Configure cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
        # Cache on Windows is so slow, it is faster without it, see many reports like
        # https://github.com/actions/runner-images/issues/7320
        if: runner.os != 'Windows'

      - uses: rui314/setup-mold@725a8794d15fc7563f59595bd9556495c0564878 # v1
        if: runner.os == 'Linux' || runner.os == 'Windows'

      # Use Mold linker for shorter build times
      - name: Use Mold linker on Linux and Windows
        shell: bash
        run: |
          echo "RUSTFLAGS=${{ env.RUSTFLAGS }} -C link-arg=-fuse-ld=mold" >> $GITHUB_ENV
        if: runner.os == 'Linux' || runner.os == 'Windows'

      # Increase the inlining threshold to make sure the compiler can see that some functions do not panic.
      # Native CPU and LTO to allow the compiler to apply more optimizations and prove lack of panics in more cases.
      - name: Set up RUSTFLAGS
        shell: bash
        run: |
          echo "RUSTFLAGS=${{ env.RUSTFLAGS }} -Cllvm-args=--inline-threshold=5000 -C embed-bitcode -C lto -Z dylib-lto -C target-cpu=native" >> $GITHUB_ENV

      - name: Ensure no panics in annotated code
        shell: bash
        run: |
          # TODO: This doesn't seem to work for now: https://users.rust-lang.org/t/compiler-optimizations-are-different-for-crate-itself-vs-dependency/130187?u=nazar-pc
          # So we end up building individual crates instead, which is unfortunate
          # cargo -Zgitoxide -Zgit build --release --all-targets --features no-panic

          # Ensure no panics in various crates
          for crate_path in crates/{contracts/{core,example,system},execution,farmer,node,shared}/*; do
            # Not all crates have this feature yet
            if ! grep --no-messages --quiet '^no-panic = \[' "$crate_path/Cargo.toml"; then
              continue
            fi
            crate="$(basename -- $crate_path)"
            echo "Checking \`$crate\`"
            cargo -Zgitoxide -Zgit build --release --all-targets --features no-panic --package $crate
          done
        if: matrix.type == 'default'

      - name: Ensure no panics in annotated code (various features)
        shell: bash
        run: |
          # Ensure no panics with `alloc` feature
          for crate_path in crates/{execution,farmer,node,shared}/*; do
            # Not all crates have this feature yet
            if ! grep --no-messages --quiet '^no-panic = \[' "$crate_path/Cargo.toml" || \
               ! grep --no-messages --quiet '^alloc = \[' "$crate_path/Cargo.toml"; then
              continue
            fi
            crate="$(basename -- $crate_path)"
            echo "Checking \`alloc\` in \`$crate\`"
            cargo -Zgitoxide -Zgit build --release --all-targets --features no-panic --package $crate --features $crate/alloc
          done

          echo "Checking \`executor\` in \`ab-contracts-common\`"
          cargo -Zgitoxide -Zgit build --release --all-targets --features no-panic --package ab-contracts-common --features ab-contracts-common/executor

          echo "Checking \`payload-builder\` in \`ab-system-contract-simple-wallet-base\`"
          cargo -Zgitoxide -Zgit build --release --all-targets --features no-panic --package ab-system-contract-simple-wallet-base --features ab-system-contract-simple-wallet-base/payload-builder
        if: matrix.type == 'features'

      - name: Ensure no panics in annotated code (guest feature)
        run: |
          # Ensure no panics with `guest` feature
          for contract_path in crates/contracts/{example,system}/*; do
            # Not all contracts have this feature yet
            if ! grep --no-messages --quiet '^no-panic = \[' "$contract_path/Cargo.toml"; then
              continue
            fi
            contract="$(basename -- $contract_path)"
            echo "Checking \`guest\` in \`$contract\`"
            cargo -Zgitoxide -Zgit build --release --all-targets --features no-panic --package $contract --features $contract/guest
          done
          for contract_path in crates/contracts/core/*; do
            # Not all contracts have this feature yet
            if ! grep --no-messages --quiet '^no-panic = \[' "$crate_path/Cargo.toml" || \
               ! grep --no-messages --quiet '^guest = \[' "$crate_path/Cargo.toml"; then
              continue
            fi
            contract="$(basename -- $contract_path)"
            echo "Checking \`guest\` in \`$contract\`"
            cargo -Zgitoxide -Zgit build --release --all-targets --features no-panic --package $contract --features $contract/guest
          done
        if: matrix.type == 'guest-feature' && runner.os == 'Linux'

  contracts:
    runs-on: ubuntu-24.04
    # Gives the slow cargo test jobs a head start
    needs: cargo-test-slow-head-start

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Configure cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Ensure contracts compile for a custom target
        run: |
          for contract_path in crates/contracts/{example,system}/*; do
            contract="$(basename -- $contract_path)"
            echo "Checking \`$contract\`"
            # TODO: This uses x86-64-based target, but will have to change to riscv64e-based target eventually
            cargo -Zgitoxide -Zgit rustc -Z build-std=core --crate-type cdylib --profile contract --target crates/contracts/x86_64-unknown-none-abundance.json --package $contract --features $contract/guest
          done

  rust-all:
    # Hack for buggy GitHub Actions behavior with skipped checks: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/troubleshooting-required-status-checks#handling-skipped-but-required-checks
    if: ${{ always() }}
    runs-on: ubuntu-24.04
    needs:
      - cargo-clippy
      - cargo-fmt
      - cargo-test
      - cargo-test-slow
      - contracts
      - no-panic

    steps:
      - name: Check job statuses
        # Another hack is to actually check the status of the dependencies or else it'll fall through
        run: |
          echo "Checking statuses..."
          [[ "${{ needs.cargo-clippy.result }}" == "success" ]] || exit 1
          [[ "${{ needs.cargo-fmt.result }}" == "success" ]] || exit 1
          [[ "${{ needs.cargo-test.result }}" == "success" ]] || exit 1
          [[ "${{ needs.cargo-test-slow.result }}" == "success" ]] || exit 1
          [[ "${{ needs.contracts.result }}" == "success" ]] || exit 1
          [[ "${{ needs.no-panic.result }}" == "success" ]] || exit 1
