(function() {
    var type_impls = Object.fromEntries([["ab_client_api",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-MerkleMountainRange%3CMAX_N%3E\" class=\"impl\"><a href=\"#impl-Clone-for-MerkleMountainRange%3CMAX_N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const MAX_N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for MerkleMountainRange&lt;MAX_N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; MerkleMountainRange&lt;MAX_N&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","ab_client_api::BlockMerkleMountainRange"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-MerkleMountainRange%3CMAX_N%3E\" class=\"impl\"><a href=\"#impl-Debug-for-MerkleMountainRange%3CMAX_N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const MAX_N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for MerkleMountainRange&lt;MAX_N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","ab_client_api::BlockMerkleMountainRange"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-MerkleMountainRange%3CMAX_N%3E\" class=\"impl\"><a href=\"#impl-Default-for-MerkleMountainRange%3CMAX_N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const MAX_N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for MerkleMountainRange&lt;MAX_N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; MerkleMountainRange&lt;MAX_N&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","ab_client_api::BlockMerkleMountainRange"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MerkleMountainRange%3CMAX_N%3E\" class=\"impl\"><a href=\"#impl-MerkleMountainRange%3CMAX_N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const MAX_N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; MerkleMountainRange&lt;MAX_N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; MerkleMountainRange&lt;MAX_N&gt;</h4></section></summary><div class=\"docblock\"><p>Create an empty instance</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_peaks\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_peaks</a>(peaks: &amp;MmrPeaks&lt;MAX_N&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;MerkleMountainRange&lt;MAX_N&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new instance from previously collected peaks.</p>\n<p>Returns <code>None</code> if input is invalid.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;MerkleMountainRangeBytes&lt;MAX_N&gt;</h4></section></summary><div class=\"docblock\"><p>Get byte representation of Merkle Mountain Range</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">from_bytes</a>(\n    bytes: &amp;MerkleMountainRangeBytes&lt;MAX_N&gt;,\n) -&gt; &amp;MerkleMountainRange&lt;MAX_N&gt;</h4></section></summary><div class=\"docblock\"><p>Create an instance from byte representation.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Bytes must be previously created by [<code>Self::as_bytes()</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_leaves\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">num_leaves</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Get number of leaves aggregated in Merkle Mountain Range so far</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.root\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">root</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]&gt;</h4></section></summary><div class=\"docblock\"><p>Calculate the root of Merkle Mountain Range.</p>\n<p>In case MMR contains a single leaf hash, that leaf hash is returned, <code>None</code> is returned if\nthere were no leaves added yet.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peaks\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">peaks</a>(&amp;self) -&gt; MmrPeaks&lt;MAX_N&gt;</h4></section></summary><div class=\"docblock\"><p>Get peaks of Merkle Mountain Range</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_leaf\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_leaf</a>(&amp;mut self, leaf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Add leaf to Merkle Mountain Range.</p>\n<p>There is a more efficient version [<code>Self::add_leaves()</code>] in case multiple leaves are\navailable.</p>\n<p>Returns <code>true</code> on success, <code>false</code> if too many leaves were added.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_leaves\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_leaves</a>&lt;'a, Item, Iter&gt;(&amp;mut self, leaves: Iter) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]&gt;,\n    Iter: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = Item&gt; + 'a,</div></h4></section></summary><div class=\"docblock\"><p>Add many leaves to Merkle Mountain Range.</p>\n<p>This is a more efficient version of [<code>Self::add_leaf()</code>] in case multiple leaves are\navailable.</p>\n<p>Returns <code>true</code> on success, <code>false</code> if too many leaves were added.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_leaf_and_compute_proof\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_leaf_and_compute_proof</a>(\n    &amp;mut self,\n    leaf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;([<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>], <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]&gt;)&gt;</h4></section></summary><div class=\"docblock\"><p>Add leaf to Merkle Mountain Range and generate inclusion proof.</p>\n<p>Returns <code>Some((root, proof))</code> on success, <code>None</code> if too many leaves were added.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_leaf_and_compute_proof_in\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_leaf_and_compute_proof_in</a>&lt;'proof&gt;(\n    &amp;mut self,\n    leaf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>],\n    proof: &amp;'proof mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">{ _ }</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;([<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>], &amp;'proof mut [[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]])&gt;</h4></section></summary><div class=\"docblock\"><p>Add leaf to Merkle Mountain Range and generate inclusion proof.</p>\n<p>Returns <code>Some((root, proof))</code> on success, <code>None</code> if too many leaves were added.</p>\n</div></details><section id=\"method.add_leaf_and_compute_proof_inner\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_leaf_and_compute_proof_inner</a>(\n    &amp;mut self,\n    leaf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>],\n    proof: &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">{ _ }</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;([<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>], <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.verify\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">verify</a>(\n    root: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>],\n    proof: &amp;[[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]],\n    leaf_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>,\n    leaf: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>],\n    num_leaves: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Verify a Merkle proof for a leaf at the given index.</p>\n<p>NOTE: <code>MAX_N</code> constant doesn’t matter here and can be anything that is <code>&gt;= 1</code>.</p>\n</div></details></div></details>",0,"ab_client_api::BlockMerkleMountainRange"],["<section id=\"impl-Copy-for-MerkleMountainRange%3CMAX_N%3E\" class=\"impl\"><a href=\"#impl-Copy-for-MerkleMountainRange%3CMAX_N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const MAX_N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for MerkleMountainRange&lt;MAX_N&gt;</h3></section>","Copy","ab_client_api::BlockMerkleMountainRange"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[17222]}