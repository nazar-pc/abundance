rd_("BbConstant K used for proof of spaceCjOpenGL 3.3+ (Windows), OpenGL ES 3.0+ (Linux, Android, \xe2\x80\xa6o<code>i8</code>AbI/O error occurred0o<code>u8</code>fGpu IDAlExit code indicating successCnArray of all <code>Backend</code> values, corresponding to \xe2\x80\xa6AiCpu / Software Rendering.B`Ephemeral execution environment.ClA measure of compute resources, 1 Gas == 1 ns of compute \xe2\x80\xa6A`<code>i16</code>A`<code>i32</code>A`<code>i64</code>A`Max block numberA`Max block wrightoMaximum balancehMax slotA`Max sector indexAbMax s-bucket indexmMaximum value0oMinimum balancemMinimum valueAbFirst block numbernPiece index 1.0fSlot 1A`Segment index 1.AcHistory size of oneAnTmp type used by this contractA`<code>u16</code>A`<code>u32</code>A`<code>u64</code>AoAdd new transaction to the poolBfFFI code generated by procedural macro000000000000mGet the valueEhTry to get access to initialized <code>Data</code>, returns <code>None</code> if not \xe2\x80\xa6BbDerive key from proof of time seedBcNumber of intermediate shard blocksAkNumber of leaf shard blocksAfNumber of transactionsmGet file sizeAjTotal number of candidatesAfNumber of stored bytes0lMax s-bucketAeCreate a new instance000BaCreate a new Subspace slot worker111AfCreate a new PoT stateAnCreate a new timekeeper source33333333333CbCreate a new method fingerprint from its metadata.444444BnCreate a transaction for <code>contract</code>AfCreate a new instance.66666BeCreate a value from <code>u128</code>7EcAllocate <code>FlatPieces</code> that will hold <code>piece_count</code> pieces \xe2\x80\xa6888CmCreate a new sector ID by deriving it from public key and \xe2\x80\xa699BiCreate shard index from <code>u32</code>.:BbCreate new erasure coding instance;;;;;;;;;;;;;ClCreate a new instance from a hashmap containing existing \xe2\x80\xa6<CmCreate new sector contents map initialized with zeroes to \xe2\x80\xa6CaCreate a new instance from existing boolean value>BoCreate a new tree from a fixed set of elements.AhCreate an empty instanceBhInitialize address allocator for a shardAeCreate a new instance00000000000000000<00000<BgProof of space-related data structures.BaProof-of-time consensus constantsBfProof of time-related data structures.oRun slot workerAhRun proof of time sourceCnRun timekeeper until receiver returned from constructor is \xe2\x80\xa6mSet new valueoBlock body typejBlock bodyBcIntermediate shard block body error2Aa<code>Bool</code>CjJust like <code>bool</code>, but any bit pattern is valid.jChia tableAeDirect3D-12 (Windows)Bd<code>enum E { Variant {..} }</code>Aa<code>i128</code>Al<code>#[init]</code> method.CfCorresponds to <code>ContractMetadataKind::Init</code>AdKeep current contextAgSparse Merkle Tree LeafClSentinel contract address, inaccessible and not owned by \xe2\x80\xa6BmDummy backend, which may be used for testing.DjCall contract under <code>Address::NULL</code> context (corresponds to \xe2\x80\xa6Ck4096 is as a relatively safe size due to sector size on \xe2\x80\xa6mSize in bytes000AhPublic key size in bytesAgSignature size in bytes2AkSize of a piece (in bytes).nSize in bytes.4AjSize of the chunk in bytesCfSize of a segment record, it is guaranteed to be a \xe2\x80\xa6AmSize of record root in bytes.BdSize of record chunks root in bytes.AnSize of record proof in bytes.6BeSize of proof of space seed in bytes.BeSize of proof of space proof in bytes;;;;;;;BjSize of archived history segment in bytes.<<BjSize of recorded history segment in bytes.=AmSize of chunk proof in bytes.?AaTransaction seal.jShim tableAoSlot type used by this contractB`Received during the sync processlSync variantAa<code>u128</code>o<code>()</code>AdGenesis block numberAaZero block weightnPiece index 0.0fSlot 0nSector index 0kS-bucket 0.A`Segment index 0.CmThe ordering of bits within an <code>A::Store</code> element.AeBlock body primitivesnGet block bodyCaGet a regular block body out of the owned versionDiGet <code>BeaconChainBody</code> out of <code>OwnedBeaconChainBody</code>EeGet <code>IntermediateShardBody</code> out of <code>OwnedIntermediateShardBody</code>DeGet <code>LeafShardBody</code> out of <code>OwnedLeafShardBody</code>CmGet <code>BlockBody</code> out of <code>OwnedBlockBody</code>jBlock body0000AdCall prepared methodCiCall a method at specified address and with specified \xe2\x80\xa6BbChia proof of space implementationCfSomething that can be used as \xe2\x80\x9ccode\xe2\x80\x9d in native \xe2\x80\xa6AhGet the inner error codeAhThe wrapped data buffer.BjAccess internal <code>File</code> instanceAoReturns the argument unchanged.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000kObject hashlObject hash.CiHash of the block header prefix, part of the eventual \xe2\x80\xa6CkHash of the consensus info, part of the eventual block rootCmHash of the beacon chain info, part of the eventual block \xe2\x80\xa6CgHash of the block consensus parameters, part of the \xe2\x80\xa6CiHash of the block header result, part of the eventual \xe2\x80\xa6CmHash of the block header seal, part of the eventual block \xe2\x80\xa6A`Public key hash.kProof hash.B`Hash of the whole segment headerAiCompute transaction hash.AhInitialize ChaCha8 stateCfInitialize building of <code>OwnedLeafShardBody</code>CiInitialize building of <code>OwnedBeaconChainBlock</code>CoInitialize building of <code>OwnedIntermediateShardBlock</code>CgInitialize building of <code>OwnedLeafShardBlock</code>BaCalls <code>U::from(self)</code>.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CgIterator over intermediate shard blocks in a collectionBoIterator over leaf shard blocks in a collectionBjIterator over transactions in a collectionBhIterate over all slots in the collectionBbGet iterator over all transactionsjLeaf value0kDevice nameAkOpen the existing database.CmOpen a file with basic open options at the specified path \xe2\x80\xa6AlReading into aligned memory.AfRead contract\xe2\x80\x99s codejRead stateAgCompute block body rootCeCompute the root of the intermediate shard block infoCgCompute the root of the intermediate shard blocks info.22BoCompute the root of the leaf shard blocks info.3AhCompute block body root.BfCompute block root out of this header.ClCompute Merkle Tree with child shard blocks, part of the \xe2\x80\xa61111AgBeacon chain block rootAnRoot contained within a piece.AkGet the root of Merkle TreeBlCalculate the root of Merkle Mountain Range.AaBlock header sealkSeal lengthA`Transaction sealCiUtilities for <code>Seal</code> creation and verificationAbSeed for this slotAbProof of time seed0ClDerive seed from proof of time in case entropy injection \xe2\x80\xa6CmShim proof of space implementation that works much faster \xe2\x80\xa6DcSign transaction hash created with <code>hash_transaction()</code>.mGet file sizeCeNumber of bytes that are currently used to store dataAnTotal size of all transactionskSlot number00BgSlot for which PoT output was generated111BoAt which slot change of parameters takes effectmAsync variantAjContains full block insideeBlockDgBlock that contains <code>BlockHeader</code> and <code>BlockBody</code>mLeaf is emptyEhSimilar to <code>Self::Enum</code>, but for exactly <code>1</code> enum variants and \xe2\x80\xa6EhSimilar to <code>Self::Enum</code>, but for exactly <code>2</code> enum variants and \xe2\x80\xa6EhSimilar to <code>Self::Enum</code>, but for exactly <code>3</code> enum variants and \xe2\x80\xa6EhSimilar to <code>Self::Enum</code>, but for exactly <code>4</code> enum variants and \xe2\x80\xa6EhSimilar to <code>Self::Enum</code>, but for exactly <code>5</code> enum variants and \xe2\x80\xa6EhSimilar to <code>Self::Enum</code>, but for exactly <code>6</code> enum variants and \xe2\x80\xa6EhSimilar to <code>Self::Enum</code>, but for exactly <code>7</code> enum variants and \xe2\x80\xa6EhSimilar to <code>Self::Enum</code>, but for exactly <code>8</code> enum variants and \xe2\x80\xa6EhSimilar to <code>Self::Enum</code>, but for exactly <code>9</code> enum variants and \xe2\x80\xa6BgRead-only <code>#[env]</code> argument.CgCorresponds to <code>ContractMetadataKind::EnvRo</code>BhRead-write <code>#[env]</code> argument.CgCorresponds to <code>ContractMetadataKind::EnvRw</code>Ao<code>#[input]</code> argument.CgCorresponds to <code>ContractMetadataKind::Input</code>AkMetal API (Apple platforms)AaOther or Unknown.kOwned blockA`Owned block bodyAbOwned block headerAlA piece of archival history.oPoT chain reorgBkReset context to <code>Address::NULL</code>CdCollection of slots, primarily for the execution \xe2\x80\xa6AcProof of space kindBgRead-only <code>#[tmp]</code> argument.CgCorresponds to <code>ContractMetadataKind::TmpRo</code>BhRead-write <code>#[tmp]</code> argument.CgCorresponds to <code>ContractMetadataKind::TmpRw</code>oTrait metadata.lBlock itselfmGenesis blockAhBlock-related primitivesBjGet regular block out of the owned versionDkGet <code>BeaconChainBlock</code> out of <code>OwnedBeaconChainBlock</code>CbGet <code>IntermediateShardBlock</code> out of \xe2\x80\xa6DgGet <code>LeafShardBlock</code> out of <code>OwnedLeafShardBlock</code>iGet blockBkBuild a new block using provided parametersBdBuild native execution configurationkBlock bytes00CbCreate an instance for regular bytes (alignment 1)AiChunk at the above offsetAbNumber of elementsAfNumber of transactionsoLow-level errorBeConsensus parameters derivation errorAhBlock verification errorAfBlock persisting error2nSolution error4444kInner error05AaLower-level error00060CjBy default, formatting will be aborted if the database \xe2\x80\xa6mSegment itemsDbData structures related to the owned version of <code>Block</code>DfData structures related to the owned version of <code>BlockBody</code>DhData structures related to the owned version of <code>BlockHeader</code>DhData structures related to the owned version of <code>Transaction</code>AaOwner of the slotjSlot owner1DhParse address from a string formatted using <code>Self::format()</code>.BbGet peaks of Merkle Mountain RangeDiMMR peaks, first <code>Self::num_peaks()</code> elements are occupied \xe2\x80\xa6AoProof contained within a piece.BhRun PoT proving and produce checkpoints.CiReset any changes that might have been done on this levelAhShard-related primitivesBeAll slots touched by the transaction.AjSplit into header and body0BgSplit piece into underlying components.CnStore contact\xe2\x80\x99s code overriding previous code that might \xe2\x80\xa6AlWriting from aligned memory.lWrite state.AdCustom builder errorAcCustom import errorAiCustom verification errorClWrapper data structure encapsulating a single compatible \xe2\x80\xa6EeSimilar to <code>Self::Enum</code>, but for exactly <code>10</code> enum variants \xe2\x80\xa6AaBlock header typelBlock headerBeIntermediate shard block header error2CmTrait that is used for types that are crossing host/guest \xe2\x80\xa6DaExplicit <code>#[output]</code> argument or <code>T</code> of \xe2\x80\xa6ChCorresponds to <code>ContractMetadataKind::Output</code>BkProof of time key(input to the encryption).AeProof-of-space proofsDjEnum to encapsulate the selection between <code>ReadAtSync</code> and [\xe2\x80\xa6B`Record contained within a piece.ChRead-only <code>#[slot]</code> argument with an address.ChCorresponds to <code>ContractMetadataKind::SlotRo</code>CiRead-write <code>#[slot]</code> argument with an address.ChCorresponds to <code>ContractMetadataKind::SlotRw</code>Aj<code>struct S {..}</code>AiCollection of Chia tablesCbVulkan API (Windows, Linux, Android, MacOS via \xe2\x80\xa6CmCall contract under context of the wallet (corresponds to \xe2\x80\xa6AnActual segment roots (invalid)AoSequence number in the databaseB`Actual number of PoT checkpointsBbActual number of own segment rootsBjActual number of intermediate shard blocks1BdActual number of child segment roots2BbActual number of leaf shard blocks33BcActual number of child shard blocks0AfActual number of bytesAdActual size in bytesmActual length0CgWill re-allocate if capacity is not enough to store \xe2\x80\xa6AbAppend some bytes.0CeAppend some bytes by using more of allocated, but \xe2\x80\xa6ChAppend some elements by using more of allocated, but \xe2\x80\xa6ChGet a raw pointer to the underlying data with no checks.CeGet <code>Transaction</code> out of owned transactionBdGet a reference out of owned version0BbGet internal string representationBhConvert shard index to <code>u32</code>.AkGet internal representation000CeReconstructed encoded blocks with their block numbersBeInner buffer with block body contents000B`Inner buffer block body contentsBgInner buffer with block header contents000BbInner buffer block header contentsBlInner buffer with owned transaction contentsAgCaller of this contract0BbCreate Chia proof of space tables.BiDeploy a new contract with specified codeCnDerive next slot input while taking parameters change into \xe2\x80\xa6fDriverBcExtend sources using erasure codingAjFinish building block bodyAeFormat a new databaseBhFormat address for presentation purposesAiPoT gossip functionality.BmHashes-related data structures and functions.lBlock headerAgBlock header primitivesA`Get block headerCfBlock header that corresponds to an intermediate shard0CcGet a regular block header out of the owned versionDmGet <code>BeaconChainHeader</code> out of <code>OwnedBeaconChainHeader</code>CcGet <code>IntermediateShardHeader</code> out of \xe2\x80\xa6DiGet <code>LeafShardHeader</code> out of <code>OwnedLeafShardHeader</code>DaGet <code>BlockHeader</code> out of <code>OwnedBlockHeader</code>88888AbTransaction headerAfImport provided block.BfWhether GPU is considered to be modernDdLike <code>Self::new()</code>, but used pre-allocated memory for \xe2\x80\xa6lBlock numberAiBeacon chain block numberC`Get block number (unwrap <code>Unaligned</code>)2BiOffset of the object in the encoded blockCjRaw record offset of the object in that piece, for use \xe2\x80\xa6DkGet implementation of <code>ReadAtSync</code> that add specified offset \xe2\x80\xa6DeGet implementation of <code>ReadAtAsync</code> that add specified \xe2\x80\xa6CeGet proof of time output out of checkpoints (last \xe2\x80\xa6BiIterator over parity pieces (odd indices)BmSegment of archived history containing piecesAoPieces-related data structures.AhIterate over all pieces.AcBlock header prefixDh<code>Record::NUM_CHUNKS</code> proofs, corresponding to set bits of \xe2\x80\xa60B`Record contained within a piece.CoRemove <code>Data</code> inside and turn instance back into \xe2\x80\xa6BaRemove transactions from the poolAcBlock header resultAnSector-related data structuresAcShared block header00BjIterator over source pieces (even indices)BoSparse Merkle Tree and related data structures.BgReturns the string name of the backend.CiRead-only access to a slot with a specified owner and \xe2\x80\xa6CjRead-write access to a slot with a specified owner and \xe2\x80\xa6CkVerify provided block header/body, typically as part of \xe2\x80\xa6AhVerify Ed25519 signatureAgCheck solution validityBaVerify previously generated proofCdVerify a Merkle proof for a leaf at the given index.BbVerify previously generated proof.CcVerify a Merkle proof for a leaf at the given indexCdVerify proof of space for a given seed and challengeCiVerify checkpoint, number of iterations is set across \xe2\x80\xa6CdVerify seal created by <code>hash_and_sign()</code>.EhLogically the same as <code>u128</code>, but aligned to <code>8</code> bytes instead \xe2\x80\xa6AfAddress of a contract.CbArray <code>[T; N]</code> with up to 2^8 elements.AkBackends supported by wgpu.3AcBalance of a token.ClExtension trait that provides helper methods for calling \xe2\x80\xa6AaEd25519 signaturelEd25519 seal0CjExtension convenience trait that allows pre-allocating \xe2\x80\xa6ChInvalid shard kind (if decoded from invalid bit pattern)AlThe number of bytes in a keyAkMainnet human-readable partAmThe number of bytes in a hashCmSpecial dummy enum variant only used as an implementation \xe2\x80\xa6dTODOAdProof of space seed.AbProof of time seedBnShard is present and will be used for recoveryCaReplace context with current contract\xe2\x80\x99s addressAjS-bucket used in consensusCjThe segment represents a collection of items stored in \xe2\x80\xa6BeKey of the slot in <code>Slots</code>EfSimilar to <code>Self::Struct</code>, but for exactly <code>0</code> struct fields \xe2\x80\xa6EfSimilar to <code>Self::Struct</code>, but for exactly <code>1</code> struct fields \xe2\x80\xa6EfSimilar to <code>Self::Struct</code>, but for exactly <code>2</code> struct fields \xe2\x80\xa6EfSimilar to <code>Self::Struct</code>, but for exactly <code>3</code> struct fields \xe2\x80\xa6EfSimilar to <code>Self::Struct</code>, but for exactly <code>4</code> struct fields \xe2\x80\xa6EfSimilar to <code>Self::Struct</code>, but for exactly <code>5</code> struct fields \xe2\x80\xa6EfSimilar to <code>Self::Struct</code>, but for exactly <code>6</code> struct fields \xe2\x80\xa6EfSimilar to <code>Self::Struct</code>, but for exactly <code>7</code> struct fields \xe2\x80\xa6EfSimilar to <code>Self::Struct</code>, but for exactly <code>8</code> struct fields \xe2\x80\xa6EfSimilar to <code>Self::Struct</code>, but for exactly <code>9</code> struct fields \xe2\x80\xa6AkTestnet human-readable partAjAddress-related primitivesAkGet internal representationBaTurn value into <code>u128</code>gBackendB`Get balance of specified addressAjBalance-related primitivesCdBuilder of native executor for specified shard indexBfTransaction payload creation utilitiesBlChia proof of space reimplementation in RustAiProduce compact metadata.0AhContext of the execution0AdCurrent history sizeCeWe assume a block can always fit into the segment \xe2\x80\xa6AeCreate a new instanceAmPrimitives related to Ed25519BlEntropy that should be injected at this timeBhExecute previously verified transaction.BnExecutes provided transactions in the payload.CnUtility function to execute transaction with the wallet in \xe2\x80\xa6BgCreate an instance from <code>u8</code>0BaInitialize block state at genesisDiTry to get exclusive access to initialized <code>Data</code>, returns \xe2\x80\xa6BeConvert instance into <code>u8</code>0CnData structures related to objects (useful data) contained \xe2\x80\xa6BdPadding for data structure alignmentBjNot used and must be set to <code>0</code>ChReturn the number of partially archived bytes if the \xe2\x80\xa6nPayload lengthAcTransaction payloadCnThis module contains generic utilities for serializing and \xe2\x80\xa6CeUsed to tie the lifetime to <code>ExternalArgs</code>CmUtilities for turning solution candidates (from auditing) \xe2\x80\xa6CeFill the buffer by reading bytes at a specific offsetCmFill the buffer by reading bytes at a specific offset and \xe2\x80\xa6AaReading utilitiesAfRecover missing shardsDjInitialize by inserting <code>Data</code> by value or replace existing \xe2\x80\xa6AcReplace inner valueB`Sectors-related data structures.CgSet the length of the useful data to a specified value.CjTruncates or extends the underlying file, updating the \xe2\x80\xa6BbConvert to internal representationCbSize of the contents <code>to_ptr</code> points to00000000000AcTransaction versionoBlock archiver.CcArray <code>[T; N]</code> with up to 2^16 elements.CcArray <code>[T; N]</code> with up to 2^32 elements.ClExtension trait that provides helper methods for calling \xe2\x80\xa6AgMain contract metadata.BoA trait that indicates the struct is a contact.AaEnvironment stateAnFungible token trait prototypeCfMax size of the allocation necessary for this data \xe2\x80\xa60DgMethod metadata, see <code>ContractMetadataKind</code> for encoding \xe2\x80\xa60000000000DfTrait metadata, see <code>ContractMetadataKind</code> for encoding \xe2\x80\xa6CbMetadata that corresponds to a method being called2222222222222222222ClData structure metadata in binary form, describing shape \xe2\x80\xa6033333333333333333333333BoMMR peaks for <code>MerkleMountainRange</code>.AcNothing has changedAeLeaf contains a valueAkProof of space proof bytes.AcProof of time errorAaGlobal PoT state.ChData structure representing sector ID in farmer\xe2\x80\x99s plotBaShort human-readable address partBcFarmer solution for slot challenge.ClExtension trait that provides helper methods for calling \xe2\x80\xa6EgSimilar to <code>Self::Struct</code>, but for exactly <code>10</code> struct fields \xe2\x80\xa6BbAdd leaf to Merkle Mountain Range.CfMake sure the file has a specified number of bytes \xe2\x80\xa6AkGet internal representationCgAccess the underlying byte representation of a data \xe2\x80\xa6C`Get byte representation of Merkle Mountain RangeoGet inner valueAbAuditing utilitiesBgNumber of bytes are allocated right nowAaCapacity in bytes0CgCast an exclusive reference to this instance into a \xe2\x80\xa60CmCast a shared reference to this instance into a reference \xe2\x80\xa60CnModule containing wrapper for SCALE encoding/decoding with \xe2\x80\xa6BoWhether transaction pool contains a transactionmSlot contentsAnContract that manages the slotCmAddress of the contract that contains a function to below \xe2\x80\xa6Da<code>#[contract]</code> macro to derive contract implementation.DaContract implementing <code>TxHandler</code> trait to use for \xe2\x80\xa633B`Expected segment roots (correct)AhExpected sequence numberAhExpected number of bytesmExpected sizeAfExpected size in bytesoExpected length0AdFile extension traitCfCreate a new exclusive instance from provided data \xe2\x80\xa6CiCreate a reference to a type, which is represented by \xe2\x80\xa6CjCreate a new shared instance from provided data reference.AeCreate a new instanceB`Get code for <code>owner</code>.AmConvert into <code>u64</code>DcReturns <code>true</code> if there are no intermediate shard blocksCkReturns <code>true</code> if there are no leaf shard blocksCfReturns <code>true</code> if there are no transactionsCbReturns <code>Ok(true)</code> if the file is emptyBdReturns true if no candidates insideBkReturns <code>true</code> if length is zero0AkCheck if the state is emptyCcWhether this error is fatal and makes farm unusableCeWhether this error is fatal and renders farm unusableCbValidate record root hash produced by the archiverCjValidate proof embedded within a piece produced by the \xe2\x80\xa6CoMMR root of all block roots, including <code>parent_root</code>AbPlotting utilitiesB`Position of a piece in a segmentkActual sizeAaProvided s-bucketBfMutable root contained within a piece.hS-bucketBaSegments-related data structures.AlSet the number of used bytesCmPointer to the number of bytes that are currently used to \xe2\x80\xa6hSolutionBeHistory size solution was created forAmConvert block number to bytesAmConvert piece index to bytes.AnConvert piece offset to bytes.AlConvert slot number to bytesAnConvert sector index to bytes.B`Create a new instance from bytesAgTurn into owned versionBeCreate an owned version of this block0001BdCreate an owned version of this body0002BfCreate an owned version of this header000BkCreate an owned version of this transactionFbTransfer some <code>amount</code> of tokens <code>from</code> one contract <code>to</code> anotherBeTruncate stored bytes to this length.0CaTruncate internal initialized bytes to this size.0AfProof of time verifierBfCompact alias for <code>[u8; 8]</code>AnThe number of bytes in a blockE`Block body that together with <code>BlockHeader</code> form a <code>Block</code>kBlock root.CkBroadcast on the network during normal operation (not sync)kChain info.AeProof of space table.AcPoT chain extensionClInstance that can be used to generate tables with better \xe2\x80\xa6BaBlock corresponds to a leaf shardBfBlock body corresponds to a leaf shard0BhBlock header corresponds to a leaf shard02BgLeaf shard, doesn\xe2\x80\x99t have child shardsDiWrapper type for <code>Data</code> that may or may not be filled with \xe2\x80\xa6AeProof-of-space proofsCkProof of time output, can be intermediate checkpoint or \xe2\x80\xa6AjStorage backend read error0A`A kind of shard.;DbOpaque slot index, used to identify a used slot <code>Slots</code>BiA transaction handler interface prototypeChUnaligned wrapper over another <code>TrivialType</code>.DkWrapper type for <code>Data</code> that is the same size, but doesn\xe2\x80\x99t \xe2\x80\xa6CdSize of the contents <code>_out_ptr</code> points to0BlOptimized and more exotic APIs around BLAKE3ClAdds new block to internal buffer, potentially producing \xe2\x80\xa6AeAlignment of the typeAkGet internal representation0AeVerify a transaction.EfReads state of <code>owner</code> and returns <code>Ok(())</code> if authorization \xe2\x80\xa6CmUtility function to authorize transaction with the wallet \xe2\x80\xa6oBest block rootC`FFI interface into a method, called by the host.AfRoot of the block bodyCaCalculate solution distance for given parameters.AfRead contract\xe2\x80\x99s code3CdSize of the contents <code>code_ptr</code> points to000AjCopy from specified bytes.0BoCopy contents from another <code>IoType</code>.BdCopy contents from another instance.BcStatic reference to an empty bufferCeReturns <code>Device</code> for each available deviceBnConvert contact error into contract exit code.BoCreate an instance from internal representationCdSize of the contents <code>from_ptr</code> points to000000000E`Instantiate <code>ReadAt</code> from some <code>ReadAtSync</code> implementationiGas limitCjReturns a stateful table generator with better performanceAfAccess to stored bytes0AcGet piece by index.CdHelper function to hash two nodes together using \xe2\x80\xa6BeSize of blockchain history in pieces.BcIs this piece index a source piece?CnCheck if solution distance is within the provided solution \xe2\x80\xa6CaCreate boxed value without hitting stack overflow00DgLike <code>Self::new()</code>, but creates heap-allocated instance, \xe2\x80\xa6BmRegular input value with specified alignment.C`Total number of pages available for reads/writesDkNumber of peaks stored in <code>Self::peaks</code> that are occupied by \xe2\x80\xa6BmExplicit padding, contents must be all zeroesCnPadding for data structure alignment, contents must be all \xe2\x80\xa6BgMutable proof contained within a piece.AjNumber of clones in memory000000000CdSize of the contents <code>seal_ptr</code> points to00000000000iSector IDCdSize of the contents <code>self_ptr</code> points to000000AaEd25519 signatureEeReturns <code>Some(output_index)</code> or <code>None</code> if explicit slot addressC`Solutions-related data structures and functions.BoSplit piece into underlying mutable components.oBlock timestampAgComputes the following:CjEnsure flat pieces contains cheaply cloneable shared data.CdEnsure piece contains cheaply cloneable shared data.CnEnsure archived history segment contains cheaply cloneable \xe2\x80\xa6AaDecode type name.CgAdd seal and return <code>OwnedBeaconChainHeader</code>CmAdd seal and return <code>OwnedIntermediateShardHeader</code>CeAdd seal and return <code>OwnedLeafShardHeader</code>CfAdd seal and return <code>OwnedBeaconChainBlock</code>ClAdd seal and return <code>OwnedIntermediateShardBlock</code>CdAdd seal and return <code>OwnedLeafShardBlock</code>kAbort earlyBgCompact alias for <code>[u8; 16]</code>BgCompact alias for <code>[u8; 32]</code>BgCompact alias for <code>[u8; 64]</code>BfBLAKE3 hash output transparent wrapperEaSimilar to <code>Vec&lt;u8&gt;</code>, but when encoded with SCALE codec uses \xe2\x80\xa6CnContains the beginning of the block inside, remainder will \xe2\x80\xa6BjProof for chunk contained within a record.B`Unique identifier for a databaseB`Supported physical device types.CkFlat representation of multiple pieces concatenated for \xe2\x80\xa6ClExtension trait that provides helper methods for calling \xe2\x80\xa6AmMax possible number of shardsBcNumber of chunks within one record.CdNumber of pieces in one segment of archived history.CgNumber of pieces in one segment of archived history \xe2\x80\xa6BgAn owned version of <code>Block</code>.AlA piece of archival history.kPiece indexFbSync version of <code>ReadAt</code>, it is both <code>Send</code> and <code>Sync</code> and is \xe2\x80\xa6BeRecord root contained within a piece.jShard kind00000kShard indexkSlot numberAiProof of space table typeAaTimekeeper sourceAaVirtual / Hosted.CeSize of the contents <code>_seal_ptr</code> points to0CeSmall GPU-friendly software implementation of ChaCha8BiAdd many leaves to Merkle Mountain Range.CkIterator over proofs in the same order as provided leaf \xe2\x80\xa6ClGet an exclusive raw pointer to the underlying data with \xe2\x80\xa6CjGet exclusive access to the underlying pointer with no \xe2\x80\xa60BkBlock root at which transaction was createdBnBlock root at which transaction was authorizedjChain infoCnStore contact\xe2\x80\x99s code overriding previous code that might \xe2\x80\xa6C`FFI interface into a method, called by the host.DlHashing function like <code>blake3::hash()</code>, but <code>const fn</code>BiFind proof of space for a given challengeEaInstantiate <code>ReadAt</code> from some <code>ReadAtAsync</code> implementationBjCreate a new instance from provided bytes.0AnCreate block number from bytesAnCreate piece index from bytes.AmCreate slot number from bytesAoCreate sector index from bytes.B`Create a new instance from bytesBkReconstruct sector contents map from bytes.CiCreate a reference to a type, which is represented by \xe2\x80\xa6BlCreate an instance from byte representation.CoCreate a new <code>OwnedBeaconChainHeader</code> from its partsDeCreate a new <code>OwnedIntermediateShardHeader</code> from its partsCmCreate a new <code>OwnedLeafShardHeader</code> from its partsBgCreate owned transaction from its partsCfCreate a new instance from previously collected peaks.BaGet pieces with provided indices.DjSimilar to <code>hash_pair()</code>, but hashes multiple pairs at once \xe2\x80\xa6BmInitialize a wallet with specified public keyAfInitialize a new blockChInitialize native token on a shard with max issuance \xe2\x80\xa6C`Returns initial state with a provided public keyAaInitialize state.EcReturns <code>Some(output_index)</code> or <code>None</code> if regular input valueAcExtract inner valueAjConvert into owned buffer.BcExtract all slots in the collectionCjReturns <code>true</code> if the node is currently offlineCkReturns <code>true</code> if the chain is currently syncingAhSlot iterations providedClGet number of leaves aggregated in Merkle Mountain Range \xe2\x80\xa6AgNumber of leaves in MMRCeSize of the contents <code>owner_ptr</code> points to00CbParallel iterator over parity pieces (odd indices)CcParallel iterator over source pieces (even indices)CaMutable iterator over parity pieces (odd indices)AaPoT output itselfAbEd25519 public keyAgRead piece from sector.BfRead slots touched by the transaction.AiNumber of read-only slotsDfSlots in the form of <code>TransactionSlot</code> that may be read \xe2\x80\xa6BhMutable record contained within a piece.nGet shard kindBbNumber of consecutive empty leavesCbMutable iterator over source pieces (even indices)jRead stateC`FFI interface into a method, called by the host.AfRoot of the state treeCeSize of the contents <code>state_ptr</code> points to00000000000AdTrait name as bytes.CnExtend PoT chain if it matches provided expected next slot \xe2\x80\xa6CeSize of the contents <code>value_ptr</code> points to000BdWrite this transaction into the bodyCmA wrapper data structure with 4096 bytes alignment, which \xe2\x80\xa60BhCompact alias for <code>[u8; 128]</code>BhCompact alias for <code>[u8; 256]</code>BhCompact alias for <code>[u8; 512]</code>AfResult of sector auditBeBlock corresponds to the beacon chainBjBlock body corresponds to the beacon chain0BlBlock header corresponds to the beacon chain02AbBeacon chain shardE`Block header that together with <code>BlockBody</code> form a <code>Block</code>AfBlock import interfacelBlock numberAnObject stored inside the blockfOriginBfBlockWeight type for fork choice rule.BjDiscrete GPU with separate CPU/GPU memory.BfFingerprint of the method being calledClExtension trait that provides helper methods for calling \xe2\x80\xa6BgSize of blockchain history in segments.AeReceived invalid seallInvalid sealBnInformation about a new slot that just arrivedBfTrait representing a way to get piecesAfPiece offset in sectorDbPointer with trivial type that this <code>IoType</code> representsAnProof of time slot informationClVerifier data structure that verifies and caches results \xe2\x80\xa6FcAsync version of <code>ReadAt</code>, it is neither <code>Send</code> nor <code>Sync</code> and \xe2\x80\xa6AkChunk contained in a recordBfRecord proof contained within a piece.CdSystem contract for managing code of other contractsAiSector index in consensusCbKinds of items that are contained within a segmentBmSegment root contained within segment header.CgCaches that can be used to optimize the creation of \xe2\x80\xa6EdSimilar to <code>Transaction</code>, but doesn\xe2\x80\x99t require <code>allow</code> or \xe2\x80\xa6CkSimple wrapper data type that is designed in such a way \xe2\x80\xa6Aj<code>struct S(..);</code>AmDatabase is not formatted yetAdState of the wallet.BhWhether encoding should be aborted early0CnGiven a set of pieces of a segment of the archived history \xe2\x80\xa6CfSize of the contents <code>amount_ptr</code> points to000000000000BoGet the value as <code>Duration</code> instanceAkAssume value is initializedDhAssume that the first <code>size</code> are initialized and can be read.0AaBest block headeroFull block sizeCgChecked addition, returns <code>None</code> on overflow00CkChecked subtraction, returns <code>None</code> on underflow00DbChecked integer subtraction. Computes <code>self - rhs</code>, \xe2\x80\xa6ChProof of time checkpoints from after future proof of \xe2\x80\xa6AiProof of time checkpoints00AiProof for the above chunkBiDeploy a new contract with specified codeC`FFI interface into a method, called by the host.AkDerives next solution rangekDevice typekDriver infoCaEncode internal contents into <code>output</code>BfFingerprint of the method being called5BbCreate an owned body from a buffer000BdCreate an owned header from a buffer0000BfCreate owned transaction from a bufferCiCreate a new shared instance from provided memory buffer.0AeCreate a new instance0AgComputes the following:222CfSize of the contents <code>header_ptr</code> points to00000000000BgInitialize logger with typical settingsCkCheck if this shard is a child shard of <code>parent</code>BiMax address to be allocated on this shardAeMethod name as bytes.AeExplicit slot addressCiBlock is partially archived with provided number of bytesAkOwn address of the contract0BgPage offset where storage item is found00AhRoot of the parent blockCkPiece index where the object is contained (at least its \xe2\x80\xa6kPiece indexAePlot a single sector.CnMake sure file has specified number of bytes allocated for \xe2\x80\xa6CjRecord root that can use used to verify that piece was \xe2\x80\xa6CfSize of the contents <code>result_ptr</code> points to00BhSender that can be used to send the sealCgExact sector plot size (sector contents map, record \xe2\x80\xa6BhShard index where execution is happening0kShard indexCiSlot worker drives block and vote production based on \xe2\x80\xa6lWrite state.C`FFI interface into a method, called by the host.CfSize of the contents <code>target_ptr</code> points to0000CnCapacity of the allocated memory <code>to_ptr</code> points to0000AnTransaction-related primitivesCeGet <code>Transaction</code> out of owned transactionDaTry to create an instance from its <code>u8</code> representation00EfGet a read-only <code>Env</code> instance for calling <code>#[view]</code> methods \xe2\x80\xa6jAdd header00AjNumber of read-write slotsDiSlots in the form of <code>TransactionSlot</code> that may be written \xe2\x80\xa6BiCompact alias for <code>[u8; 1024]</code>BiCompact alias for <code>[u8; 2028]</code>BiCompact alias for <code>[u8; 4096]</code>lBeacon chainAgBlock builder interfaceB`Additional details about a blockCiData structure containing expected input for external \xe2\x80\xa6AfA single ChaCha8 blockAgState of ChaCha8 cipher2mDecoder errorCjWrapper data structure for direct/unbuffered/uncached I/O.Al<code>enum E { A, B }</code>ClExtension trait that provides helper methods for calling \xe2\x80\xa6CiMarker trait for external arguments when calling methods.AhFailed to seal the blockmGeneric blockBnObject stored in the history of the blockchainBoData structure containing expected input to \xe2\x80\xa6000000000000DkData structure containing expected input to <code>flipper_new()</code>, \xe2\x80\xa6DkData structure containing expected input to <code>flipper_value()</code>\xe2\x80\xa6DjData structure containing expected input to <code>flipper_flip()</code>\xe2\x80\xa6333333333333DiData structure containing expected input to <code>block_get()</code>, \xe2\x80\xa64DkData structure containing expected input to <code>block_genesis()</code>\xe2\x80\xa6DjData structure containing expected input to <code>code_store()</code>, \xe2\x80\xa6DiData structure containing expected input to <code>code_read()</code>, \xe2\x80\xa6DkData structure containing expected input to <code>code_deploy()</code>, \xe2\x80\xa688888888888DjData structure containing expected input to <code>state_read()</code>, \xe2\x80\xa6DkData structure containing expected input to <code>state_write()</code>, \xe2\x80\xa6::mInvalid blockAiPiece verification failedAiProof of space table typeBaErrors that happen during provingCeReader with fixed offset added to all attempted readsBaErrors that happen during readingBhSystem contract for managing block stateCeSystem contract for managing state of other contractsnSeal too largeAcSegment index type.mSlot durationAjCollection of transactionsEdSimilar to <code>Self::TupleStruct</code>, but for exactly <code>1</code> struct \xe2\x80\xa6EdSimilar to <code>Self::TupleStruct</code>, but for exactly <code>2</code> struct \xe2\x80\xa6EdSimilar to <code>Self::TupleStruct</code>, but for exactly <code>3</code> struct \xe2\x80\xa6EdSimilar to <code>Self::TupleStruct</code>, but for exactly <code>4</code> struct \xe2\x80\xa6EdSimilar to <code>Self::TupleStruct</code>, but for exactly <code>5</code> struct \xe2\x80\xa6EdSimilar to <code>Self::TupleStruct</code>, but for exactly <code>6</code> struct \xe2\x80\xa6EdSimilar to <code>Self::TupleStruct</code>, but for exactly <code>7</code> struct \xe2\x80\xa6EdSimilar to <code>Self::TupleStruct</code>, but for exactly <code>8</code> struct \xe2\x80\xa6EdSimilar to <code>Self::TupleStruct</code>, but for exactly <code>9</code> struct \xe2\x80\xa6ClExtension trait that provides helper methods for calling \xe2\x80\xa6EeStateful read-only <code>#[view]</code> method (has <code>&amp;self</code> in its \xe2\x80\xa6CnCorresponds to <code>ContractMetadataKind::ViewStateful</code>CgSize of the contents <code>_header_ptr</code> points to0ChCollection of modules used for dealing with archival \xe2\x80\xa6BjUtilities used in various CLI applicationsCgSize of the contents <code>address_ptr</code> points to000000CjAccess the underlying mutable byte representation of a \xe2\x80\xa6CgSize of the contents <code>balance_ptr</code> points to0BcBlock building for the beacon chainCkBlock import to import the block created by a block builderC`Block number at which transaction was authorizedBgNumber of bytes are allocated right nowCdName of the crate in which the method was duplicatedBhSize of the encoded transaction in bytesBlSize of encoded checksummed sector metadata.CnSize of sector contents map when encoded and stored in the \xe2\x80\xa6AfEra duration in blocksCaFind proof of space quality for a given challengeC`FFI interface into a method, called by the host.BmGet proof for specified s-bucket (if exists).0BeS-buckets at which proofs were found.0AoCreate owned block from buffers0000BoDerive initial PoT seed from genesis block rootCnCreate a mutable reference to a type, which is represented \xe2\x80\xa6BfFFI code generated by procedural macro00A`Get genesis seedCmCompute the headers root of the intermediate shard blocks \xe2\x80\xa6CgCompute the headers root of the leaf shard blocks info.ChSize of the blockchain history at the time of sector \xe2\x80\xa6AnSize of the blockchain historyCiSize of the blockchain history at time of sector creationAgBlock is archived fullyClCreate vector filled with zeroed records without hitting \xe2\x80\xa6BjNext address to be allocated on this shardCgSize of the contents <code>payload_ptr</code> points to00000000000ChGetting object pieces from the network or various cachesBeGetter for pieces of archival history0AkPieces offset within sectorBkIndex of the piece that failed verificationlPiece offset0AfProof of time verifierAkProof for above record rootC`Index of the sector where the solution was foundlSector index000000BjRoot of roots of all records in a segment.CbSegment root of the segment to which piece belongsBoIndicate last archived block was archived fullyChAn exclusive pointer to the number of bytes that are \xe2\x80\xa6AbFirst storage itemAaUser transactionsBoTry to create an instance from provided string.0kExceptions:ClDecode type, return its recommended capacity that should \xe2\x80\xa6CkWrite all bytes at <code>buf</code> at <code>offset</code>.BmWrite all provided bytes at a specific offsetBgWrite encoded sector into sector outputnAlready existsBaErrors that happen during provingBiThe block isn\xe2\x80\x99t found, possibly too oldAeWebGPU in the browserCcCan\xe2\x80\x99t extend MMR, too many blocks; this is an \xe2\x80\xa60CiData structure containing expected input for external \xe2\x80\xa6CkA trait that indicates the implementation of a contract \xe2\x80\xa6CfMostly opaque sector encoding result ready for writingEcSimilar to <code>Self::EnumNoFields</code>, but for exactly <code>1</code> enum \xe2\x80\xa6EcSimilar to <code>Self::EnumNoFields</code>, but for exactly <code>2</code> enum \xe2\x80\xa6EcSimilar to <code>Self::EnumNoFields</code>, but for exactly <code>3</code> enum \xe2\x80\xa6EcSimilar to <code>Self::EnumNoFields</code>, but for exactly <code>4</code> enum \xe2\x80\xa6EcSimilar to <code>Self::EnumNoFields</code>, but for exactly <code>5</code> enum \xe2\x80\xa6EcSimilar to <code>Self::EnumNoFields</code>, but for exactly <code>6</code> enum \xe2\x80\xa6EcSimilar to <code>Self::EnumNoFields</code>, but for exactly <code>7</code> enum \xe2\x80\xa6EcSimilar to <code>Self::EnumNoFields</code>, but for exactly <code>8</code> enum \xe2\x80\xa6EcSimilar to <code>Self::EnumNoFields</code>, but for exactly <code>9</code> enum \xe2\x80\xa6AkErasure coding abstraction.BjIntegrated GPU with shared CPU/GPU memory.BkBlock body that corresponds to a leaf shardDkThe maximum alignment supported by <code>IoType</code> types (16 bytes, \xe2\x80\xa6BeMax allowed size of the contract codeAhContext for method call.CbShard is missing and does not need to be recoverednMissing parentCgNumber of s-buckets contained within one sector record.AmLeaf contains a value (owned)ClExtension trait that provides helper methods for calling \xe2\x80\xa6BiInformation about sector that was plottedoPlotting statusChReconstructor helps to retrieve blocks from archived \xe2\x80\xa6nSector expiredBfSegment header for a specific segment.nSolution errornSolution rangeCiData structure containing expected input for external \xe2\x80\xa6EeSimilar to <code>Self::TupleStruct</code>, but for exactly <code>10</code> struct \xe2\x80\xa6BoContainer for storing variable number of bytes.EbStateless <code>#[view]</code> method (doesn\xe2\x80\x99t have <code>self</code> in its \xe2\x80\xa6CoCorresponds to <code>ContractMetadataKind::ViewStateless</code>D`Capacity of the allocated memory <code>_out_ptr</code> points to0ChSize of the contents <code>_payload_ptr</code> points to0jClient APIAgArgument name as bytes.BcBuilder that can create a new blockB`Additional details about a block0BaInitialize block state at genesisC`FFI interface into a method, called by the host.AeCall prepared method.D`Capacity of the allocated memory <code>code_ptr</code> points to0BdCompute block for specified counter.BaCreate proofs with 32 bytes seed.nCreate proofs.AfDisable cache on macOSAiEncode downloaded sector.DkAnonymous pointer to a struct that implements <code>ExternalArgs</code> \xe2\x80\xa68D`Capacity of the allocated memory <code>from_ptr</code> points to00B`Exclusive access to stored bytes0EnCombines <code>hash_transaction()</code> and <code>sign()</code> and returns <code>Seal</code>CjWhether the shard index corresponds to an intermediate \xe2\x80\xa6CmVerify seal against <code>BlockHeader::pre_seal_hash()</code>BmIterate over modified slots in the collectionCiDefines how many fork tips should be maintained in total.ChSize of the contents <code>new_code_ptr</code> points to0ChCreate a new read-only <code>NestedSlots</code> instanceBlCreate a new nested read-only slots instanceCjCreate a new read-write <code>NestedSlots</code> instance.0AeNew slot information.BiIterator over parity pieces (odd indices)AlPersist newly imported blockBcIndexes of pieces that were plottedAbHash to be signed.mPre-seal hashBnHash of the block before seal is applied to it000000000BdThe PoT output for <code>slot</code>AkProof of time for this slotBiProof of time for which solution is builtEhRead the exact number of bytes needed to fill <code>buf</code> at <code>offset</code>\xe2\x80\xa6BoRead exact number of bytes at a specific offsetCnWhere plotted sector should be written, vector must either \xe2\x80\xa6BoSegment index that was attempted to be inserted0BhSegment index piece index corresponds toCdSegment index that corresponds to this history size.CaGet segment index (unwrap <code>Unaligned</code>)mSegment indexBfThe segment we were trying to downloadCnCompute the segments root of the intermediate shard blocks \xe2\x80\xa6ChCompute the segments root of the leaf shard blocks info.DkCapacity of the allocated memory following <code>self_ptr</code> points \xe2\x80\xa60000CbConvenient conversion from slice to underlying \xe2\x80\xa60ClConvenient conversion from slice of record to underlying \xe2\x80\xa6CfConvenient conversion from slice of piece array to \xe2\x80\xa62BaThe slot duration in millisecondsBjIterator over source pieces (even indices)BfCreate an instance from bytes if validCiUse Direct I/O on Linux and disable buffering on Windows.CgCreate a new instance with at least specified capacity.CfMake the native execution environment aware of the \xe2\x80\xa6CfContainer or asynchronously reading bytes using in \xe2\x80\xa6BlBlock timestamp as Unix time in millisecondsCh<code>ChainInfo</code> extension for writing informationoClient databaseCiData structure containing expected input for external \xe2\x80\xa6Ck4096 is as a relatively safe size due to sector size on \xe2\x80\xa6ClExtension trait that provides helper methods for calling \xe2\x80\xa6EdSimilar to <code>Self::EnumNoFields</code>, but for exactly <code>10</code> enum \xe2\x80\xa63oInvalid paddingDeMarker trait, companion to <code>IoType</code> that indicates the \xe2\x80\xa6BfBlock that corresponds to a leaf shardBdMax allocation needed by this headerChMaximum length of the human-readable part of the addressBjShard is missing and needs to be recovered7A`Not enough bytesCmExtension convenience trait that allows setting some file \xe2\x80\xa6BkAn owned version of <code>BlockBody</code>.BlProof of time checkpoints, result of provingBcMethod to be called by the executorBeRecords encoder for plotting purposesAdFailed read s-bucketAnMetadata of the plotted sectorCiData structure containing expected input for external \xe2\x80\xa6CaStateful table generator with better performance.CaCompact alias <code>VariableBytes&lt;0&gt;</code>BhMerkle Tree and related data structures.CjRead-write access to a slot with a specified owner and \xe2\x80\xa6AgAdd the new best block.AfConvert block to bytesBoCreate an instance from internal representationnChunk locationBaConsensus info for a block headerAeConsensus informationAnEncode provided sector recordsAgErasure coding instance0C`FFI interface into a method, called by the host.EbSimilar to <code>Self::find_proof()</code>, but takes the first <code>k</code> \xe2\x80\xa6CnCreate a mutable reference to a type, which is represented \xe2\x80\xa6ClThe new object mappings for those segments. There can be \xe2\x80\xa6BbReturns state with increased nonceDjInitialize <code>PotState</code> using the best available beacon chain \xe2\x80\xa6BnTurn solution candidates into actual solutionsBlCheck whether proof created earlier is valid0AgContext for method callB`Merkle Mountain Range with blockCiSize of the contents <code>new_state_ptr</code> points to000CmThe size of the contents <code>ok_result_ptr</code> points to0CiSize of the contents <code>ok_result_ptr</code> points to1010011011010110110101010101010101010CiSize of the contents <code>old_state_ptr</code> points to0DaCapacity of the allocated memory <code>owner_ptr</code> points to00CjMutable parallel iterator over parity pieces (odd indices)CkMutable parallel iterator over source pieces (even indices)C`FFI interface into a method, called by the host.BiInformation about sector that was plottedAoProof of space for piece offsetAnReturns sizes of each s-bucketAjS-bucket sizes in a sectorAcSaturating addition00AfSaturating subtraction00DeSaturating integer subtraction. Computes <code>self - rhs</code>, \xe2\x80\xa6nSegment headerBbSegment header stored in a segmentBmAcceptable solution range for block authoringBaSolution range for this block/eranSolution range0DaCapacity of the allocated memory <code>state_ptr</code> points to000AkCheck if the state is empty>ChTry to create a new instance from provided bytes for \xe2\x80\xa600CaTry to create a new instance from provided bytes.BgCreate an instance from provided bytes.CiCreate an instance from provided correctly aligned bytes.111131BkGet instance reference from provided bytes.21233341BnTry to create an instance from provided bytes.000BfFFI code generated by procedural macro0AaAlready importingBoBlock body that corresponds to the beacon chainAaBlock header sealAaChain sync statusCkExecutor context that can be used to interact with executorCiData structure containing expected input for external \xe2\x80\xa6BmBlock header that corresponds to a leaf shardAhMax possible shard indexAmMissing proof of space proof.ChNumber of PoT checkpoints produced (used to optimize \xe2\x80\xa6CiNumber of raw records in one segment of recorded history.AaNot enough piecesAaNot enough shards0AaPayload too largeAaPayload too smallB`Worker producing proofs of time.DdContext for transaction signatures, see <code>SigningContext</code>.BkSegment size is not bigger than record sizeAfSegment decoding errorAlPoof generated by timekeeperA`Transaction hashB`Transaction pool implementation.A`Transaction slotCnThe type of transaction slot could be either explicit slot \xe2\x80\xa6EdStateless <code>#[update]</code> method (doesn\xe2\x80\x99t have <code>self</code> in its \xe2\x80\xa6DaCorresponds to <code>ContractMetadataKind::UpdateStateless</code>CkVariable bytes with up to 2^8 bytes recommended allocation.AkAdd transaction to the body0ClGet header of ancestor block number for descendant block \xe2\x80\xa6AkGet internal representationCeAudit the whole plot and generate streams of results.CgWill re-allocate if capacity is not enough to store \xe2\x80\xa6DhAlmost the same as <code>Self::create()</code>, but uses parallelism \xe2\x80\xa6AmDownload sector for plotting.D`Ensure capacity of the buffer is at least <code>capacity</code>.C`FFI interface into a method, called by the host.C`Force authoring of blocks even if we are offlineChCreate a new exclusive instance from provided memory \xe2\x80\xa60CkCreate an owned header from its parts and write it into \xe2\x80\xa600CmCreate owned transaction from its parts and write it into \xe2\x80\xa6CeTry to get checkpoints for provided seed and slot \xe2\x80\xa6BfTry to get access to initialized bytesBiTry to get access to initialized elementsDbCombines <code>hash_transaction()</code> and <code>verify()</code>DfSimilar to <code>hash_pair()</code> but already has left and right \xe2\x80\xa6CjSize of the contents <code>init_value_ptr</code> points to0CgWhether the shard index corresponds to the beacon chainDjVerify sequence of proofs of time that covers <code>slots</code> slots \xe2\x80\xa6CfMark transaction as authorized as of a specific block.BoCreate contract error with a custom error code.AkPoT input for the next slotAeNumber of checkpointsCoThe number of <code>AlignedPage</code>s in a single page group.AhPage group size in pagesC`FFI interface into a method, called by the host.CmProof of time checkpoints from after future proof of time \xe2\x80\xa6CkPublic key hash of the plot identity that should create \xe2\x80\xa6oPublic key hashBeDerive public key hash from this sealCbPublic key of the farmer that created the solutionBbPublic key corresponding to sector0CjSize of the contents <code>public_key_ptr</code> points to0000000CjSize of the contents <code>read_slots_ptr</code> points to00000000000CmNumber of latest archived segments that are considered \xe2\x80\x9c\xe2\x80\xa600AoProof of space table generatorsAiRecords encoding instanceC`Convenient conversion to slice of underlying \xe2\x80\xa6000DbCapacity of the allocated memory <code>result_ptr</code> points to00oSector metadataCbConvenient conversion from slice of underlying \xe2\x80\xa6000000AmSlot iterations for this slotAcIterations per slot0CdThe number of iterations for proof of time per slot.AmNew number of slot iterationsCgSender that can be used to send solutions for the slot.AiState type name as bytes.CmStorage backend to use for storing and retrieving storage \xe2\x80\xa6EhSimilar to <code>Self::verify()</code>, but takes the first <code>k</code> challenge \xe2\x80\xa6BaDatabase is already formatted yetAaAlready importingBjBlock that corresponds to the beacon chainBaPoT information of the best blockCiData structure containing expected input for external \xe2\x80\xa6BbError for <code>BlockImport</code>AaChecksum mismatch0CfOpaque sector downloading result and ready for writingAbEd25519 public keyAaEd25519 signature5ClExtension trait that provides helper methods for calling \xe2\x80\xa66AaFormatted addressAbGeneric block bodyAaInvalid alignmentAbInvalid parent MMRAbInvalid state rootBmAn owned version of <code>BlockHeader</code>.BmAn owned version of <code>Transaction</code>.AbPiece getter errorBlNext slot input for proof of time evaluationClRecord chunks root (source or parity) contained within a \xe2\x80\xa6CnA simple wallet contract base contract to be used by other \xe2\x80\xa6AaSolution distanceCjSparse Merkle Tree variant that has hash-sized leaves, \xe2\x80\xa6CiData structure containing expected input for external \xe2\x80\xa6CfSuper segment root contained within beacon chain blockAbToo many arguments0AcToo many read slotsCjThe type of transaction input could be either explicit \xe2\x80\xa6EgStateful read-only <code>#[update]</code> method (has <code>&amp;self</code> in its \xe2\x80\xa6DbCorresponds to <code>ContractMetadataKind::UpdateStatefulRo</code>ElStateful read-write <code>#[update]</code> method (has <code>&amp;mut self</code> in its \xe2\x80\xa6DbCorresponds to <code>ContractMetadataKind::UpdateStatefulRw</code>CdVariable bytes with up to 2^16 bytes recommended \xe2\x80\xa6CdVariable bytes with up to 2^32 bytes recommended \xe2\x80\xa6CcCompact alias <code>VariableBytes&lt;512&gt;</code>CbContainer for storing variable number of elements.CkSize of the contents <code>_read_slots_ptr</code> points to0AmProof of time implementation.BnAdd a new contract that didn\xe2\x80\x99t exist before.0BfAllocate a new address for a contract.AkGet internal representationDcCapacity of the allocated memory <code>balance_ptr</code> points to0AfInitialize a new blockC`FFI interface into a method, called by the host.C`Convenient conversion to slice of underlying \xe2\x80\xa6DgThe keyed hash function like <code>blake3::keyed_hash()</code>, but \xe2\x80\xa6A`Database versionDiConcurrently downloads the pieces for <code>segment_index</code>, and \xe2\x80\xa6BlConsensus parameters that are always present00BiCreate owned transaction from a reference6B`Get balance of specified address77BcFake solution for the genesis blockDbCreate transaction hash used for signing with <code>sign()</code>.CmUtility function to initialize the state of the wallet in \xe2\x80\xa6CfWhether the shard index corresponds to a phantom shardCkSize of the contents <code>last_action_ptr</code> points to0BiGet the last piece index in this segment.AcOutput index value.0CkSize of the contents <code>own_balance_ptr</code> points toCkSize of the contents <code>parent_root_ptr</code> points to0CkReturns the number of partially archived bytes for a block.BeHow many pieces should sector contain0BfNumber of pieces stored in this sectorCfReturns offsets of each s-bucket relatively to the \xe2\x80\xa6CbConvenient conversion from slice of underlying \xe2\x80\xa6A`Slot probabilityAaInitialize state.C`FFI interface into a method, called by the host.BcAdd method call to the transaction.AoAdd method call to the payload.BfLow-level writing from aligned memory.CkSize of the contents <code>write_slots_ptr</code> points to00000000000CaBlock header that corresponds to the beacon chainCiWrapper data structure that when encoded/decoded will \xe2\x80\xa6BcError for <code>BlockBuilder</code>CkContinuation of the partial block spilled over into the \xe2\x80\xa6AdBlock header prefix.AdBlock header result.AlBlock verification interfaceAhState of a contract slotCaCPU implementation of <code>RecordsEncoder</code>CiData structure containing expected input for external \xe2\x80\xa6AeFailed to read chunk.AmHistory size is in the futureAcGeneric owned blockAmFailed to get ancestor headerBjBlock corresponds to an intermediate shardBoBlock body corresponds to an intermediate shard0CaBlock header corresponds to an intermediate shard02CkIntermediate shard directly below the beacon chain that \xe2\x80\xa6AcInvalid chunk proofAcLast archived blockB`Created locally by block builderCgHash of method\xe2\x80\x99s compact metadata, which uniquely \xe2\x80\xa6AmNot enough metadata to decodeCfError for <code>ChainInfoWrite::persist_block()</code>AfBlock persisting error?AnOptions for plotting a sector.AoStream with proof of time slotsBjSolutions that can be proven if necessary.BaS-bucket provided is out of rangeAgMap of sector contents.CkPart of the block header, shared for different kinds of \xe2\x80\xa6AdToo many write slotsAdTotal size too largeAbTransaction headerCdCompact alias <code>VariableBytes&lt;1024&gt;</code>CdCompact alias <code>VariableBytes&lt;2028&gt;</code>CdCompact alias <code>VariableBytes&lt;4096&gt;</code>CdCompact alias <code>VariableBytes&lt;8192&gt;</code>CgCompact alias <code>VariableElements&lt;0, T&gt;</code>AhBlock verification errorClSize of the contents <code>_write_slots_ptr</code> points to0CfFetching data from the archived history of the networkCkCross-platform APIs for working with files using direct \xe2\x80\xa6AmProof of space implementationAnProgress of an archived block.CkThe new segments archived after adding the block. There \xe2\x80\xa6CiAudit a single sector and generate a stream of solutions.AaBeacon chain info00AaChain sync statusBdChange public key to a different oneBmReturns a new state with a changed public keyClUtility function to change public key of the wallet in a \xe2\x80\xa6ClCompare state with a given old state and write new state \xe2\x80\xa6AiCompute Merkle Tree root.0AiCompute Merkle Tree Root.BeNumber of pieces that were downloadedBjGet the first piece index in this segment.C`FFI interface into a method, called by the host.FbTransfer some <code>amount</code> of tokens <code>from</code> one contract <code>to</code> another11AaLeaf shard blocksClSize of the contents <code>max_issuance_ptr</code> points to0BcReturns last observed segment indexDjCreate a new <code>Slots</code> instance with system contracts already \xe2\x80\xa6ClReturns the next source piece index. Panics if the piece \xe2\x80\xa6BdSegment roots produced by this shard0000BfLow-level reading into aligned memory.EgReads and returns value of type <code>T</code> or <code>None</code> if there is not \xe2\x80\xa6CnReturns the missing piece for a segment using given set of \xe2\x80\xa6CeDerive seed from proof of time with entropy injectionCnInstall a panic handler which exits on panics, rather than \xe2\x80\xa6CiHashing function for at most single block worth of bytes.CiHashing function for at most single chunk worth of bytes.CjConvenient conversion from mutable slice to underlying \xe2\x80\xa60CiConvenient conversion from mutable slice of record to \xe2\x80\xa6CnConvenient conversion from mutable slice of piece array to \xe2\x80\xa62AaSolution distanceClSize of the contents <code>total_supply_ptr</code> points to00000CiHelper function that calls provided function with new \xe2\x80\xa6AbWrite buffer size.CiMerkle Tree variant that has hash-sized leaves and is \xe2\x80\xa6AhResult of block buildingAoProof of space table generator.AcConsensus constantsDdError that occurs when calling <code>ErasureCoding::recover()</code>BjExpected method kind, found something elseAeFailed to create bodyCgInformation about the protocol necessary for farmer \xe2\x80\xa6AdGeneric block headerAdInvalid bytes length0AdInvalid history sizeAdInvalid output indexAdInvalid piece offsetAeInvalid proof of timeAfInvalid state I/O typeDfMetadata types contained in <code>TrivialType::METADATA</code> and \xe2\x80\xa6BbInformation about leaf shard blockCmNewly archived segment as a combination of segment header \xe2\x80\xa6DfSize of the buffer in <code>u128</code> elements that is used as a \xe2\x80\xa6BkOwned aligned buffer for executor purposes.BoAn owned version of <code>LeafShardBody</code>.CiData structure containing expected input for external \xe2\x80\xa6CmResult of <code>PotState::set_known_good_output()</code> callBiReconstructor-related instantiation error0AdRecord reading errorAoState of the shard for recoveryAoProof of space table generator.BbContainer for solution candidates.CgSubspace slot worker responsible for block and vote \xe2\x80\xa6AdUnknown parent blockCeCompact alias <code>VariableBytes&lt;16384&gt;</code>CeCompact alias <code>VariableBytes&lt;32768&gt;</code>CeCompact alias <code>VariableBytes&lt;65536&gt;</code>CiVariable elements with up to 2^8 elements recommended \xe2\x80\xa6A`Client database.B`Core primitives for the protocolBdInformation about child shard blocks0AcChild shards blocksCmSize of the contents <code>contract_code_ptr</code> points to0BnDecode the next method (if any) in the payloadCiDerive piece index that should be stored in sector at \xe2\x80\xa6CmDerive proof of time entropy from chunk and proof of time \xe2\x80\xa6CjSemaphore for part of the plotting when farmer encodes \xe2\x80\xa6CoEnsuring only supported <code>N</code> can be specified for \xe2\x80\xa6C`FFI interface into a method, called by the host.DgGet exclusive access to initialized <code>Data</code>, initializing \xe2\x80\xa6AkGet a single segment headerAnReturns 16-byte aligned bytes.AbLast segment indexBdMax allocation needed by this header0AbMethod fingerprintDeCapacity of the allocated memory <code>ok_result_ptr</code> points to000000000000000000000000000000000000000BlParity chunks root contained within a piece.BgParameters for checking piece validity.9AbSuper segment root0B`Verify the provided transaction.BhExecute previously verified transaction.<<B`Verify proof of time checkpointsClCreate a new instance of the archiver with initial state \xe2\x80\xa6ClExtension trait that provides helper methods for calling \xe2\x80\xa6BnThe outcome of adding a block to the archiver.AfBad sector output sizeAnBlock is below archiving pointAgBlock body is too large0AfBlock header seal typeCiData structure containing expected input for external \xe2\x80\xa6CiErasure coding rate for records during archiving process.AnOptions for encoding a sector.2222AeInvalid header prefixAfInvalid proof of spaceCcInformation about a collection of leaf shard blocksClMerkle Mountain Range variant that has pre-hashed leaves \xe2\x80\xa6AfNative executor errorsCnNew slot notification with slot information and sender for \xe2\x80\xa6AfOutput index not foundC`An owned version of <code>LeafShardBlock</code>.AlSegment header of the parentAmCan\xe2\x80\x99t recover missing pieceChPiece reconstructor helps to reconstruct missing pieces.CiChange of parameters to apply to the proof of time chain.AeRecords encoder errorB`System contract for native tokenCjChallenge used for a particular sector for particular slotBfPersistent storage of segment headers.BlShared aligned buffer for executor purposes.ClExtension trait that provides helper methods for calling \xe2\x80\xa6DdProof-of-time verifier to be used in <code>Solution::verify()</code>AlSolution verification errorsCiData structure containing expected input for external \xe2\x80\xa6C`The only supported transaction version right nowAeToo many transactions0CdError for <code>TransactionPool::add()</code> methodAeTransaction too largeCfCompact alias <code>VariableBytes&lt;131072&gt;</code>CfCompact alias <code>VariableBytes&lt;262144&gt;</code>CfCompact alias <code>VariableBytes&lt;524288&gt;</code>CjVariable elements with up to 2^16 elements recommended \xe2\x80\xa6CjVariable elements with up to 2^32 elements recommended \xe2\x80\xa6AdMacros for contractsAdAdd segment headers.CfConvert an exclusive slice to an uninitialized version0BeSegment roots produced by child shardAcConsensus constantsCnSize of the contents <code>contract_state_ptr</code> points to00C`FFI interface into a method, called by the host.C`Derive block weight from provided solution rangeDiTry to get exclusive access to initialized <code>Data</code>, returns \xe2\x80\xa60DkReturns a block header like <code>Self::header()</code> with additional \xe2\x80\xa6DkVerify seal against <code>BeaconChainHeader::pre_seal_hash()</code> and \xe2\x80\xa6AgVerify seal against \xe2\x80\xa6DiVerify seal against <code>LeafShardHeader::pre_seal_hash()</code> and \xe2\x80\xa6DkVerify seal against <code>BlockHeader::pre_seal_hash()</code> and check \xe2\x80\xa6AcLast archived blockBdReturns last observed segment headerCnMinimum lifetime of a plotted sector, measured in archived \xe2\x80\xa600BnSolution range for the next block/era (if any)00;;;ClPrepare a single method for calling at specified address \xe2\x80\xa6CkReturns all the pieces for a segment using given set of \xe2\x80\xa6CnGiven a set of pieces of a segment of the archived history \xe2\x80\xa6CiFetching segments of the archived history of Subspace \xe2\x80\xa6BlProof for segment roots included in the body0CiSegment roots proof if there are segment roots in the \xe2\x80\xa60CjConvenient conversion from mutable slice of underlying \xe2\x80\xa600AcSolution candidatesCmThe block number that the sync process is targeting right \xe2\x80\xa6DhEmulate a transaction submitted by <code>contract</code> with method \xe2\x80\xa6BlExecute the previously verified transaction.CfTry to get checkpoints quickly without waiting for \xe2\x80\xa6DfDoes the same verification as <code>Self::is_output_valid()</code> \xe2\x80\xa6CdConvenient conversion from a slice of underlying \xe2\x80\xa60ClMake the native execution environment aware of the trait \xe2\x80\xa6BcMetadata for smart contact methods.CiData structure containing expected input for external \xe2\x80\xa6BlExpected argument kind, found something elseAiFailed to create a headerCcFixed capacity bytes with up to 2^8 bytes capacity.CjContainer for storing a number of bytes limited by the \xe2\x80\xa64444AgOutput buffer too smallBfSolution is outside the solution rangeCaAn owned version of <code>BeaconChainBody</code>.BmOwned version of <code>BlockHeaderSeal</code>CaAn owned version of <code>LeafShardHeader</code>.BiStorage backend has canceled read request0CnBit array containing space for bits equal to the number of \xe2\x80\xa6BdParameters for solution verification<<<CgMerkle Tree variant that has pre-hashed leaves with \xe2\x80\xa6AfUnexpected method kindCgCompact alias <code>VariableBytes&lt;1048576&gt;</code>CjComponents of the reference implementation of Subspace \xe2\x80\xa6CnAdvise OS/file system that file will use random access and \xe2\x80\xa60BeAlready archived portion of the blockDdDepth <code>K</code> after which a block enters the recorded historyCmBlocks at this depth are considered to be \xe2\x80\x9cconfirmed\xe2\x80\x9d \xe2\x80\xa6BjConsensus parameters (on the beacon chain)AkCurrent size of the historyAdCurrent history sizeAdFarmer protocol info0CmCreate an instance from provided bytes without performing \xe2\x80\xa6AdFuture proof of timeDkGet exclusive access to initialized <code>Data</code>, running provided \xe2\x80\xa6DgCapacity of the allocated memory <code>last_action_ptr</code> points to0CgHow many pieces one sector is supposed to contain (max)00C`FFI interface into a method, called by the host.DgCapacity of the allocated memory <code>own_balance_ptr</code> points to1ChRecommended capacity that must be allocated by the host.BmIndex of s-bucket within sector to be auditedAdS-bucket audit indexChSets the number of partially archived bytes if block \xe2\x80\xa6AeVerify a transaction.66CbConvenient conversion from slice to underlying \xe2\x80\xa60AnProgress of an archived block.CmNotification with a pre-seal hash that needs to be sealed \xe2\x80\xa6BgOptions for <code>ClientDatabase</code>AnOptions for sector downloadingCiData structure containing expected input for external \xe2\x80\xa6B`First segment index must be zeroCdFixed capacity bytes with up to 2^16 bytes capacity.CjContainer for storing a number of bytes limited by the \xe2\x80\xa6CjFixed capacity UTF-8 string with up to 2^8 bytes capacity.CgContainer for storing a UTF-8 string limited by the \xe2\x80\xa6AhGeneric owned block bodyChIncorrect segment order, each next segment must have \xe2\x80\xa6CdBlock body that corresponds to an intermediate shardAiInvalid argument I/O typeCgInvalid block, its size is smaller than the already \xe2\x80\xa6AgInvalid PoT checkpointsCjMax capacity for metadata bytes used in fixed size buffersBdMax number of arguments in a method.AgMetadata decoding error0BgBuilder for <code>NativeExecutor</code>CbAn owned version of <code>BeaconChainBlock</code>.BhErrors for <code>OwnedTransaction</code>ChPage group size is too small, must be at least two pagesCnInvalid parent MMR; this is an implementation bug and must \xe2\x80\xa6CiData structure containing expected input for external \xe2\x80\xa6BaProof-of-time consensus constantsCjData structure that contains information reconstructed \xe2\x80\xa6AlSegment reconstruction errorAhStorage item write error0AhToo many PoT checkpointsAgTransaction pool limitsAgUnexpected storage itemBnStorage backend has canceled a writing requestCiProof of space plotting utilities for GPU (Vulkan/Metal).BhInitialize address allocator for a shardC`FFI interface into a method, called by the host.CeNumber of slots between slot arrival and when the \xe2\x80\xa6CgProduce compact metadata for <code>ExternalArgs</code>.ChCalculates a Merkle Tree root for a provided list of \xe2\x80\xa6ClSemaphore for part of the plotting when farmer downloads \xe2\x80\xa6DfEnsuring only supported <code>NUM_BITS</code> can be specified for \xe2\x80\xa6CjGenesis block builder is responsible to create genesis \xe2\x80\xa6CjWhether the shard index corresponds to an intermediate \xe2\x80\xa6CaMax distance between fork tip and the best block.88ClChange of parameters to apply to the proof of time chain \xe2\x80\xa6BjChange of parameters to apply to PoT chain11CnGiven sector record chunks recover source record chunks in \xe2\x80\xa6BePersistent storage of segment headersCbList of piece indexes that belong to this segment.CmSet known good output for time slot, overriding PoT chain \xe2\x80\xa6BmInstantiate environment with executor contextAlAlignment power is too largeCdArchived history segment after archiving is applied.lEd25519 sealBhError for <code>BlockVerification</code>AiFailed to add transactionAhFailed to retrieve pieceCjFixed capacity UTF-8 bytes with up to 2^16 bytes capacity.CgContainer for storing a UTF-8 string limited by the \xe2\x80\xa6BbIncorrect piece position provided.BoBlock that corresponds to an intermediate shardAiInvalid own segment rootsDeMain contract metadata, see <code>ContractMetadataKind</code> for \xe2\x80\xa6AhMultiple contracts foundCiData structure containing expected input for external \xe2\x80\xa6BeBlock is outside the acceptable rangeCcAn owned version of <code>BeaconChainHeader</code>.2222CeRecorded history segment before archiving is applied.AjToo many leaf shard blocksAjToo many own segment roots00555AhUnexpected argument kindDhBest solution distance found, <code>None</code> in case there are no \xe2\x80\xa6CbBidirectional distance between two solution rangesDkCompute Merkle Tree root and generate a proof for the <code>leaf</code> \xe2\x80\xa6DjCapacity of the allocated memory <code>contract_code_ptr</code> points \xe2\x80\xa6DcAlmost the same as <code>Self::create_proofs()</code>, but uses \xe2\x80\xa60AfDerive evaluation seedDhConverts <code>u32</code> words into bytes, the size matches BLAKE3 hashDaSize of the contents <code>maybe_last_action_ptr</code> points toCdMutable parity chunks root contained within a piece.C`FFI interface into a method, called by the host.BbSystem contracts state after blockBkSystem contracts state in the genesis blockCiHelper function that calls provided function with new \xe2\x80\xa6DhConverts bytes into <code>u32</code> words, the size matches BLAKE3 hashDgConverts bytes into <code>u32</code> words, the size matches BLAKE3 \xe2\x80\xa6CiData structure containing expected input for external \xe2\x80\xa6AjBeacon chain block builderDfA trait that is implemented for <code>dyn ContractTrait</code> and \xe2\x80\xa6CeExpected contract or trait kind, found something elseAjGeneric owned block headerCfBlock header that corresponds to an intermediate shardBjMax possible number of addresses per shard6BjErrors for <code>OwnedLeafShardBody</code>AjParent block import failed8CmBitmask for presence of <code>super_segment_root</code> fieldAfSegment getter errors.BjError for <code>SegmentHeadersStore</code>AkToo many child shard blocks0AhExpected number of bytesBmTransaction that can be written into the bodyAmBlock building implementationBiClient-side proof of time implementation.AnConcatenates metadata sources.DkCapacity of the allocated memory <code>contract_state_ptr</code> points \xe2\x80\xa6CeDerives the global challenge from the output and slotChDownloads pieces of a segment so that segment can be \xe2\x80\xa6CmDelay after block, in slots, when entropy injection takes \xe2\x80\xa6AgExpiration history sizeCbA default implementation which gets each piece \xe2\x80\xa6CjIterate over individual record chunks (s-buckets) that \xe2\x80\xa6ChInitialize native token on a shard with max issuance \xe2\x80\xa6C`FFI interface into a method, called by the host.CeFraction of pieces from the \xe2\x80\x9crecent history\xe2\x80\x9d (\xe2\x80\xa600CjHistory size at which expiration check for sector happens.CmThe keyed hash function for at most single block worth of \xe2\x80\xa6ClThe keyed hash function for at most a single chunk worth \xe2\x80\xa6BcSoft confirmation depth for blocks.ClCompare state with a given old state and write new state \xe2\x80\xa66CdConvenient conversion from a slice of underlying \xe2\x80\xa60BiConsensus information in the block headerCfType alias for Merkle Mountain Range with block roots.AkContract metadata not foundBkSegment size is not bigger than record sizeBgError during data shards reconstructionAkInvalid first metadata byteClInvalid last archived block, its size is the same as the \xe2\x80\xa6DhByte representation of <code>MerkleMountainRange</code> with correct \xe2\x80\xa6CnBitmask for presence of <code>next_solution_range</code> fieldCnIterations are not multiple of number of checkpoints times \xe2\x80\xa6CiData structure containing expected input for external \xe2\x80\xa6CkThe number of times we try to download a segment before \xe2\x80\xa61AjUnexpected sequence numberDkSee and use <code>ab-contracts-macros</code> crate instead, this is its \xe2\x80\xa6CnAdvise OS/file system that file will use sequential access \xe2\x80\xa60DgReturns the best block header like <code>Self::best_header()</code> \xe2\x80\xa6BmInstantiate environment with executor contextBeCheck block\xe2\x80\x99s internal consistency.000BjCheck block body\xe2\x80\x99s internal consistency.000BlCheck block header\xe2\x80\x99s internal consistency.000CbHash of the segment header of the previous segmentCjSystem contract for address allocation on a particular \xe2\x80\xa6DjThe same as <code>Self::try_from_bytes()</code>, but for trusted input \xe2\x80\xa600000000000CjConvenient conversion from mutable slice to underlying \xe2\x80\xa60CfOther than unsafe API, this method is identical to \xe2\x80\xa6BoError for <code>ClientDatabase::format()</code>AlDuplicate method in contractCcSize of the buffer in pointers that is used for \xe2\x80\xa6CnInvalid max fork tip distance, it must be smaller or equal \xe2\x80\xa6CiData structure containing expected input for external \xe2\x80\xa6BlErrors for <code>OwnedBeaconChainBody</code>CnSystem simple wallet base contract that can be used by end \xe2\x80\xa6DkSame as <code>SectorMetadata</code>, but with checksums verified during \xe2\x80\xa6BnParameters for <code>SubspaceSlotWorker</code>DiBuilder for payload to be used with <code>TxHandler</code> (primarily \xe2\x80\xa6CaDecoder for transaction payload created using \xe2\x80\xa6AnBlock authoring implementationDkCompute Merkle Tree root and generate a proof for the <code>leaf</code> \xe2\x80\xa6BmInitialize a wallet with specified public keyC`FFI interface into a method, called by the host.AiIntermediate shard blocksDiCreates an iterator of <code>(s_bucket, chunk_location)</code>, where \xe2\x80\xa6BaMax block timestamp drift allowedCiRead sector record chunks, only plotted s-buckets are \xe2\x80\xa6CiSize of the part of the plot containing record chunks \xe2\x80\xa6CkGet segment headers that are expected to be included at \xe2\x80\xa6AlArchiver instantiation errorAaBeacon chain infoCnDerived consensus parameters, to be eventually turned into \xe2\x80\xa6Bj<code>ExternalArgs</code> buffer too smallAnFailed to generate database idBjInformation about intermediate shard blockAlInvalid consensus parametersBbInvalid output index size for slotCmSegment index must strictly follow last segment index, can\xe2\x80\xa6AnNon-permanent first page groupCnSize of the buffer in entries that is used to store buffer \xe2\x80\xa6CgAn owned version of <code>IntermediateShardBody</code>.BlBuilder for <code>OwnedLeafShardBlock</code>D`Bitmask for presence of <code>pot_parameters_change</code> fieldBnPayload is not a multiple of <code>u128</code>AoTimestamp too far in the futureAlUnsupported database versionAnWrong parity shard byte lengthAnWrong source shard byte lengthClAdd leaf to Merkle Mountain Range and generate inclusion \xe2\x80\xa6CmInterval, in blocks, between blockchain entropy injection \xe2\x80\xa6BhGet last archived block if there was anyBnExecutes provided transactions in the payload.C`FFI interface into a method, called by the host.CnVerify and execute the provided transaction, primarily for \xe2\x80\xa6CdConvenient conversion from a slice of underlying \xe2\x80\xa60BnErrors for <code>BeaconChainBlockImport</code>BdInformation about child shard blocksBgOptions for <code>ClientDatabase</code>CiData structure containing expected input for external \xe2\x80\xa6B`Failed to decode state type nameAoFailed to erasure-decode recordCiUsed as a key in keyed blake3 hash for inner nodes of \xe2\x80\xa6CkInformation about a collection of intermediate shard blocksBgInvalid output index alignment for slotAoOutput buffer offsets too smallBnErrors for <code>OwnedBeaconChainHeader</code>ChAn owned version of <code>IntermediateShardBlock</code>.CfOwned leaf shard block header, which is not sealed yet9BkInject known good checkpoints into verifierCmIterate mutably over individual record chunks (s-buckets) \xe2\x80\xa6CaCreates an iterator of piece offsets to which \xe2\x80\xa6ChSize of the part of the plot containing record metadata.BnError for <code>BeaconChainBlockBuilder</code>CiStorage backend to be used by <code>ClientDatabase</code>BcFailed to intermediate shard headerClInvalid soft confirmation depth, it must be smaller than \xe2\x80\xa6BnBuilder for <code>OwnedBeaconChainBlock</code>CiAn owned version of <code>IntermediateShardHeader</code>.:CgThe amount of time we wait between segment download \xe2\x80\xa6ClLengths of various components in a serialized version of \xe2\x80\xa6B`Wrong record size after decodingCjDecode the next method (if any) in the payload without \xe2\x80\xa6CnDerive sector slot challenge for this sector from provided \xe2\x80\xa6BaSender for new slot notificationsEfReads state of <code>owner</code> and returns <code>Ok(())</code> if authorization \xe2\x80\xa6C`FFI interface into a method, called by the host.BmHashing function for many single-block inputsBeConsensus parameters derivation error0B`Contract metadata decoding errorChOwned beacon chain block header, which is not sealed yetCiData structure containing expected input for external \xe2\x80\xa6ClAdd leaf to Merkle Mountain Range and generate inclusion \xe2\x80\xa6DnCreates an iterator of <code>Option&lt;chunk_offset&gt;</code>, where each \xe2\x80\xa6C`Returns initial state with a provided public key8BjConsensus parameters (on the beacon chain)DgA mirror of <code>PotParametersChange</code> for block header purposes.CbError for <code>derive_consensus_parameters</code>7DgBuilder for <code>OwnedLeafShardBody</code> that allows to add more \xe2\x80\xa67BfParameters for checking piece validityBbToo many intermediate shard blocksCaErrors for <code>TransactionPayloadBuilder</code>CaErrors for <code>TransactionPayloadDecoder</code>DhDerive history size when sector created at <code>history_size</code> \xe2\x80\xa6CmGiven sector record chunks recover extended record chunks \xe2\x80\xa6CdConvenient conversion from a slice of underlying \xe2\x80\xa60BdFailed to decode sector contents map0CbErrors for <code>OwnedIntermediateShardBody</code>DhError happening when trying to create <code>SectorContentsMap</code> \xe2\x80\xa60BeToo many leaf shard own segment rootsCiData structure containing expected input for external \xe2\x80\xa6BeFailed to adjust ancestor block forksCcErrors for <code>OwnedIntermediateShardBlock</code>DhError happening when trying to encode <code>SectorContentsMap</code> \xe2\x80\xa6CkInterval, in entropy injection intervals, where to take \xe2\x80\xa6BdChange public key to a different oneC`FFI interface into a method, called by the host.EeSize of <code>MerkleMountainRange</code>/<code>MerkleMountainRangeBytes</code> in \xe2\x80\xa6ClHashing function for at most single block worth of words \xe2\x80\xa6CdErrors for <code>BeaconChainBlockVerification</code>BfFailed to create polynomial for recordCdErrors for <code>OwnedIntermediateShardHeader</code>;BfSender for block sealing notificationsBbReturns state with increased nonce7BgExpected contract metadata, found traitCdBuilder for <code>OwnedIntermediateShardBlock</code>BfAllocate a new address for a contract.:AjInner function used in \xe2\x80\xa6C`Keyed hash function for many single-block inputsCiData structure containing expected input for external \xe2\x80\xa6BjConsensus parameters (on the beacon chain)ClOwned version of <code>BlockHeaderConsensusParameters</code>CnOwned intermediate shard block header, which is not sealed \xe2\x80\xa630DiSegment root at <code>min_sector_lifetime</code> from sector creation \xe2\x80\xa6BmReturns a new state with a changed public keyC`FFI interface into a method, called by the host.CnA simple wallet contract base contract to be used by other \xe2\x80\xa6CnIterate over chunks of s-bucket indicating if record chunk \xe2\x80\xa6BmToo many intermediate shard own segment rootsBoToo many intermediate shard child segment roots")